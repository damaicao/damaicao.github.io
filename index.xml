<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Damaicao的博客</title>
        <link>https://damaicao.github.io/</link>
        <description>Recent content on Damaicao的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 01 Dec 2021 01:23:09 +0800</lastBuildDate><atom:link href="https://damaicao.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Java学习路线</title>
        <link>https://damaicao.github.io/post/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
        <pubDate>Wed, 01 Dec 2021 01:23:09 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
        <description>&lt;h1 id=&#34;java-学习路线&#34;&gt;Java 学习路线&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;[Java 学习路线一条龙版 by 程序员鱼皮](&lt;a class=&#34;link&#34; href=&#34;https://github.com/liyupi/code-roadmap&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;liyupi/code-roadmap: 编程学习路线 (github.com)&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;💂 + 💻 = 👴🏽&lt;/p&gt;
&lt;h2 id=&#34;大纲&#34;&gt;大纲&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://qiniuyun.code-nav.cn/img/image-20211127235325557.png&#34; &gt;
		&lt;img src=&#34;https://qiniuyun.code-nav.cn/img/image-20211127235325557.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20211127235325557&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20211127235325557&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;路线特点&#34;&gt;路线特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;最新，完整一条龙的大厂 Java 学习路线，从入门到入土&lt;/li&gt;
&lt;li&gt;同时适用于想全面学习 / 快速求职的同学，可以根据符号来定制自己的专属学习路线&lt;/li&gt;
&lt;li&gt;给出目标、学习建议、关键知识点、最优资源以及各类资源推荐（视频、书籍、文档、项目、工具等）&lt;/li&gt;
&lt;li&gt;鱼皮自己是 Java 开发者，融入个人自学和从业的经历 + 思考，让路线有灵魂&lt;/li&gt;
&lt;li&gt;划分阶段、更有计划，且在最后给出持续学习的方向、探索 Java 程序员发展的无限可能&lt;/li&gt;
&lt;li&gt;完全开源，回馈社区，持续更新！&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;符号表&#34;&gt;符号表&lt;/h2&gt;
&lt;p&gt;可以通过路线知识点前的表情字符，根据自己的实际情况选择学习：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🌕 所有同学必须学习！！！&lt;/li&gt;
&lt;li&gt;🌖 非常急着找工作，才可不学；目标大厂，必须学习！&lt;/li&gt;
&lt;li&gt;🌗 急着找工作的话，可不学；目标大厂，建议学习&lt;/li&gt;
&lt;li&gt;🌘 时间充足的话，再去学&lt;/li&gt;
&lt;li&gt;⭐ 表示推荐资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;写在开头&#34;&gt;写在开头&lt;/h2&gt;
&lt;p&gt;首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致。&lt;/p&gt;
&lt;p&gt;目前，Java 由于其优秀的特性以及火爆的生态，岗位需求量大，是后台开发、安卓开发、大数据开发的主流编程语言，因此学习资源也很丰富，值得学习！&lt;/p&gt;
&lt;p&gt;有关更多编程语言的选择，大家可以看我的视频了解：https://www.bilibili.com/video/BV1y3411r7pX/&lt;/p&gt;
&lt;h2 id=&#34;阶段-0前期准备&#34;&gt;阶段 0：前期准备&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手。
&lt;ul&gt;
&lt;li&gt;推荐网站 - 菜鸟工具：https://c.runoob.com/compile/10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。
&lt;ul&gt;
&lt;li&gt;推荐本地软件 Typora：https://www.typora.io/（线上可以用 xx 文档）&lt;/li&gt;
&lt;li&gt;推荐使用 Markdown 语法编写，鱼皮教程：https://www.bilibili.com/video/BV1no4y1k7YT/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;想学好编程，别背代码，要多写，把这句话刻到脑子里。&lt;/li&gt;
&lt;li&gt;选视频和找资料的小技巧：多看评论区、多看隔壁评论区、不要看过期的视频。&lt;/li&gt;
&lt;li&gt;如何访问 GitHub：https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA（上面有很多免费的编程学习资源、项目源码，程序员必备）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;阶段-1java-入门&#34;&gt;阶段 1：Java 入门&lt;/h2&gt;
&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;培养兴趣、快速上手，能运行和编写简单的 Java 程序。&lt;/p&gt;
&lt;p&gt;学完本阶段后，可以试着用 Java 解决一些数学计算问题、编写图书管理系统等桌面端 GUI 程序，甚至是五子棋之类的小游戏。&lt;/p&gt;
&lt;h3 id=&#34;-java-编程基础45-天&#34;&gt;🌕 Java 编程基础（45 天）&lt;/h3&gt;
&lt;h4 id=&#34;知识&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Java 特点（看不懂没事，别背！）&lt;/li&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;IDEA 开发工具
&lt;ul&gt;
&lt;li&gt;新建项目&lt;/li&gt;
&lt;li&gt;运行调试&lt;/li&gt;
&lt;li&gt;界面配置&lt;/li&gt;
&lt;li&gt;插件管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java 基础语法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数据类型&lt;/li&gt;
&lt;li&gt;流程控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向对象&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;重载&lt;/li&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抽象类&lt;/li&gt;
&lt;li&gt;接口&lt;/li&gt;
&lt;li&gt;枚举&lt;/li&gt;
&lt;li&gt;常用类
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;日期时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集合类&lt;/li&gt;
&lt;li&gt;泛型&lt;/li&gt;
&lt;li&gt;注解&lt;/li&gt;
&lt;li&gt;异常处理&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;IO 流&lt;/li&gt;
&lt;li&gt;反射&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;初学一门语言时，一定要持续学习，不能中断！&lt;/p&gt;
&lt;p&gt;想要学好编程，一定要多敲代码！建议先跟着书上的例子敲一遍代码，然后试着自主编写代码，并完成课后练习。&lt;/p&gt;
&lt;p&gt;不理解代码也没关系，可以学习 Debug 后，一行一行地打断点执行，查看程序的执行过程。千万不要觉得麻烦，养成习惯后真的能节省很多重复学习的时间。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;为什么重写 equals 还要重写 hashcode？&lt;/li&gt;
&lt;li&gt;== 和 equals 比较的区别&lt;/li&gt;
&lt;li&gt;为啥有时会出现 4.0 - 3.6 = 0.40000001 这种现象？&lt;/li&gt;
&lt;li&gt;final 关键字的作用&lt;/li&gt;
&lt;li&gt;介绍 Java 的集合类&lt;/li&gt;
&lt;li&gt;ArrayList 和 LinkedList 的区别&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 韩顺平 - 零基础 30 天学会 Java：https://www.bilibili.com/video/BV1fh411y7R8（900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⭐ 菜鸟教程：https://www.runoob.com/java/java-tutorial.html（可以在线练习）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;廖雪峰 Java 教程：https://www.liaoxuefeng.com/wiki/1252599548343744&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDEA 中文教程：https://github.com/judasn/IntelliJ-IDEA-Tutorial&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDEA Mac 快捷键指南，地址：https://www.jianshu.com/p/454c71172c46&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDEA Win 常用快捷键，地址：https://www.jianshu.com/p/5de7cca0fefc&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Head First Java》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线游戏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Codegym：https://codegym.cc/zh（玩玩前几关培养兴趣不错，但后面收费了）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-java-83-天&#34;&gt;🌖 Java 8（3 天）&lt;/h3&gt;
&lt;h4 id=&#34;知识-1&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Stream API&lt;/li&gt;
&lt;li&gt;Lambda 表达式&lt;/li&gt;
&lt;li&gt;新日期时间 API&lt;/li&gt;
&lt;li&gt;接口默认方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-1&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;Java 8 是如今企业开发中最主流的 Java 稳定版本，在这个版本出现了很多实用的新特性，虽然面试考点不多，但能够提升编程效率，建议学习。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-1&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;java 8 有哪些新特性？&lt;/li&gt;
&lt;li&gt;HashMap 在 jdk 1.7 和 1.8 的区别？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-1&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 宋红康 - 全网最全Java零基础入门教程：https://www.bilibili.com/video/BV1Kb411W75N（只看 Java 8 部分即可）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 菜鸟教程：https://www.runoob.com/java/java8-new-features.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Java 8 实战》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 在线编写运行  Java 8：https://www.tutorialspoint.com/compile_java8_online.php&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 8 小代码片段：https://github.com/biezhi/30-seconds-of-java8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;练手项目&#34;&gt;练手项目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java 实现简单计算器：https://www.lanqiao.cn/courses/185&lt;/li&gt;
&lt;li&gt;Eclipse 实现 Java 编辑器：https://www.lanqiao.cn/courses/287&lt;/li&gt;
&lt;li&gt;一本糊涂账：https://how2j.cn/module/104.html&lt;/li&gt;
&lt;li&gt;Java 五子棋：https://blog.csdn.net/cnlht/article/details/8176130&lt;/li&gt;
&lt;li&gt;Java 中国象棋：https://blog.csdn.net/cnlht/article/details/8205733&lt;/li&gt;
&lt;li&gt;JAVA GUI 图书馆管理系统：https://github.com/uboger/LibraryManager&lt;/li&gt;
&lt;li&gt;JAVA 坦克大战小游戏：https://github.com/wangzhengyi/TankWar&lt;/li&gt;
&lt;li&gt;Swing 编写的俄罗斯方块：https://github.com/HelloClyde/Tetris-Swing&lt;/li&gt;
&lt;li&gt;小小记账本：https://github.com/xenv/SmallAccount（适合了解数据库的同学）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;尾声&#34;&gt;尾声&lt;/h3&gt;
&lt;p&gt;学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？&lt;/p&gt;
&lt;p&gt;不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？&lt;/p&gt;
&lt;p&gt;当然是数据结构和算法！&lt;/p&gt;
&lt;h2 id=&#34;阶段-2巩固基础&#34;&gt;阶段 2：巩固基础&lt;/h2&gt;
&lt;h3 id=&#34;目标-1&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;想学好编程，计算机基础知识要学好。&lt;/p&gt;
&lt;p&gt;比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。&lt;/p&gt;
&lt;p&gt;我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 基础。（那直接用 Java 来写算法题目，一举两得，岂不美哉？）&lt;/p&gt;
&lt;p&gt;此外，建议大家利用零碎时间多去了解 &lt;strong&gt;计算机基础知识&lt;/strong&gt; ，比如操作系统、计算机网络等，对你后面学习开发框架之类的知识都有帮助。&lt;/p&gt;
&lt;h3 id=&#34;java-基础30-天&#34;&gt;Java 基础（30 天）&lt;/h3&gt;
&lt;h4 id=&#34;学习建议-2&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固  Java 的不二之选，其中图形界面章节可以选择不看。&lt;/p&gt;
&lt;p&gt;之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍 1000 题（每天 30 题，1 个月也就刷完了，二刷会更快！）。虽然都是选择题，但能学到很多 Java 语言的特性、避免写代码时容易犯的错误。&lt;/p&gt;
&lt;p&gt;如果你时间不够，只是想快速找到工作，那么本章节甚至可以完全跳过，后面慢慢弥补即可。&lt;/p&gt;
&lt;h4 id=&#34;资源-2&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;书籍
&lt;ul&gt;
&lt;li&gt;⭐《Java 核心技术卷 1》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;练习
&lt;ul&gt;
&lt;li&gt;⭐ 牛客题库：https://www.nowcoder.com/intelligentTest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-数据结构与算法&#34;&gt;🌖 数据结构与算法&lt;/h3&gt;
&lt;h4 id=&#34;知识-2&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间 / 空间复杂度分析&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;链表&lt;/li&gt;
&lt;li&gt;集合&lt;/li&gt;
&lt;li&gt;哈希表&lt;/li&gt;
&lt;li&gt;树
&lt;ul&gt;
&lt;li&gt;二叉树&lt;/li&gt;
&lt;li&gt;多叉树&lt;/li&gt;
&lt;li&gt;字典树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排序&lt;/li&gt;
&lt;li&gt;双指针&lt;/li&gt;
&lt;li&gt;查找&lt;/li&gt;
&lt;li&gt;分治&lt;/li&gt;
&lt;li&gt;动态规划&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;回溯&lt;/li&gt;
&lt;li&gt;贪心&lt;/li&gt;
&lt;li&gt;位运算&lt;/li&gt;
&lt;li&gt;DFS&lt;/li&gt;
&lt;li&gt;BFS&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-3&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;学算法一定要多思考、多练习！！！&lt;/p&gt;
&lt;p&gt;在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。&lt;/p&gt;
&lt;p&gt;不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。&lt;/p&gt;
&lt;p&gt;之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。一定要把自己做过的每道题目代码都自行保存好，定期复习。时间足够的话，也可以试着自己写写题解，在网上分享一下自己的刷题思路，找到自己坚持的动力。&lt;/p&gt;
&lt;p&gt;有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-2&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LeetCode 精选 100 道：https://leetcode-cn.com/problem-list/2cktkvj/&lt;/li&gt;
&lt;li&gt;LeetCode 精选算法 200 题：https://leetcode-cn.com/problem-list/qg88wci/&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;资源-3&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;文章
&lt;ul&gt;
&lt;li&gt;⭐ 刷了 1000 多道算法题，一点心得：https://t.1yb.co/oT9q（鱼皮原创）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在线教程
&lt;ul&gt;
&lt;li&gt;⭐ LeetCode LeetBook：https://leetcode-cn.com/leetbook/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在线刷题
&lt;ul&gt;
&lt;li&gt;⭐ LeetCode：https://leetcode-cn.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书籍
&lt;ul&gt;
&lt;li&gt;⭐《小灰的漫画算法》&lt;/li&gt;
&lt;li&gt;⭐《剑指 Offer》&lt;/li&gt;
&lt;li&gt;《程序员代码面试指南》&lt;/li&gt;
&lt;li&gt;图解算法数据结构：https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/&lt;/li&gt;
&lt;li&gt;LeetCode 101（C++）：https://github.com/changgyhub/leetcode_101&lt;/li&gt;
&lt;li&gt;LeetCode 题解（C++）：https://github.com/soulmachine/leetcode&lt;/li&gt;
&lt;li&gt;LeetCode Cookbook（Go 语言）：https://github.com/halfrost/LeetCode-Go&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;尚硅谷 Java 数据结构与算法：https://www.bilibili.com/video/BV1E4411H73v（难度比面试的要求大一些，适合希望更全面学习的朋友）&lt;/li&gt;
&lt;li&gt;Leetcode 真题解析：https://www.bilibili.com/video/BV1a54y1b74k&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工具
&lt;ul&gt;
&lt;li&gt;VisuAlgo 数据结构和算法动态可视化：https://visualgo.net/zh&lt;/li&gt;
&lt;li&gt;数据结构可视化：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html&lt;/li&gt;
&lt;li&gt;RegExr：https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b（学习、创建和测试正则表达式的在线可视化工具）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网站
&lt;ul&gt;
&lt;li&gt;五分钟学算法：https://www.cxyxiaowu.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-计算机导论&#34;&gt;🌘 计算机导论&lt;/h3&gt;
&lt;h4 id=&#34;知识-3&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;计算机发展历史&lt;/li&gt;
&lt;li&gt;计算机应用领域&lt;/li&gt;
&lt;li&gt;计算机发展方向&lt;/li&gt;
&lt;li&gt;计算机基本组成&lt;/li&gt;
&lt;li&gt;二进制&lt;/li&gt;
&lt;li&gt;编程语言发展&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-4&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;大学计算机专业的同学一般刚开学就会上这门课，虽说学习它并不会直接提高你的编程技能，但能够让你更了解计算机和编程，从而在一定程度上帮助你培养学习兴趣、确定学习方向。&lt;/p&gt;
&lt;p&gt;自学的话，不用刻意去学习计算机导论，而是可以通过看视频、阅读课外读物的方式慢慢地了解计算机的故事。&lt;/p&gt;
&lt;h4 id=&#34;资源-4&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;《计算机科学速成课》：https://www.bilibili.com/video/BV1EW411u7th（从底层到上层的计算机知识科普，强烈推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书籍
&lt;ul&gt;
&lt;li&gt;《半小时漫画计算机》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-操作系统&#34;&gt;🌖 操作系统&lt;/h3&gt;
&lt;h4 id=&#34;知识-4&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;操作系统的组成&lt;/li&gt;
&lt;li&gt;进程、线程&lt;/li&gt;
&lt;li&gt;进程 / 线程间通讯方式&lt;/li&gt;
&lt;li&gt;进程调度算法&lt;/li&gt;
&lt;li&gt;进程 / 线程同步方式&lt;/li&gt;
&lt;li&gt;进程 / 线程状态&lt;/li&gt;
&lt;li&gt;死锁&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;局部性原理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-5&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;说实话，操作系统这一块知识挺枯燥的。你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃？&lt;/p&gt;
&lt;p&gt;我的建议是，可以先利用课余时间看一些网课或者有趣的课外书，对一些操作系统的概念先有个大致的印象，比如进程、线程、死锁，等后面有时间了再系统学习、等到找工作了再去背相关八股文。&lt;/p&gt;
&lt;p&gt;还在校园就跟着学校的进度学习就成，自学的话可以看下《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了，但如果看不懂也别担心，这并不影响你后续知识的学习。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-3&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;什么是死锁？死锁产生的条件？&lt;/li&gt;
&lt;li&gt;线程有哪几种状态？&lt;/li&gt;
&lt;li&gt;有哪些进程调度算法？&lt;/li&gt;
&lt;li&gt;什么是缓冲区溢出？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-5&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《清华操作系统原理》：https://www.bilibili.com/video/BV1uW411f72n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《编码》&lt;/li&gt;
&lt;li&gt;《30天自制操作系统》&lt;/li&gt;
&lt;li&gt;《现代操作系统》（难度较大，不推荐新手看）&lt;/li&gt;
&lt;li&gt;《深入理解计算机系统》（难度较大，不推荐新手看）&lt;/li&gt;
&lt;li&gt;《 自己动手写操作系统》（国产好书，网上可以下载）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大学课件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浙大操作系统：https://github.com/QSCTech/zju-icicles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-计算机网络&#34;&gt;🌖 计算机网络&lt;/h3&gt;
&lt;h4 id=&#34;知识-5&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;网络分层模型&lt;/li&gt;
&lt;li&gt;网络传输过程&lt;/li&gt;
&lt;li&gt;IP、端口&lt;/li&gt;
&lt;li&gt;HTTP / HTTPS 协议&lt;/li&gt;
&lt;li&gt;UDP / TCP 协议&lt;/li&gt;
&lt;li&gt;ARP 地址解析协议&lt;/li&gt;
&lt;li&gt;网络安全&lt;/li&gt;
&lt;li&gt;DNS 域名解析&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-6&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;很多学习 Java 开发的同学最后都是从事 &lt;strong&gt;后端开发&lt;/strong&gt; 的工作，而计算机网络知识是后端开发的重点。&lt;/p&gt;
&lt;p&gt;和操作系统一样，自学网络可能会很枯燥，建议先看有趣的课外书，比如《图解 HTTP》；或者有趣的视频，比如《计算机网络微课堂》。后面要找工作面试前，再重点去背一些八股文就好了。还在学校的同学好好上课一般就没问题。&lt;/p&gt;
&lt;p&gt;学习基础能帮助自己今后发展更稳定，且更容易接受新知识，所以请不要相信基础无用论。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-4&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;计算机网络各层有哪些协议？&lt;/li&gt;
&lt;li&gt;TCP 和 UDP 协议的区别？&lt;/li&gt;
&lt;li&gt;TCP 为什么需要三次握手和四次挥手？&lt;/li&gt;
&lt;li&gt;HTTP 和 HTTPS 协议的区别？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-6&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《计算机网络微课堂》：https://www.bilibili.com/video/BV1c4411d7jb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐《图解 HTTP》&lt;/li&gt;
&lt;li&gt;《网络是怎样连接的》&lt;/li&gt;
&lt;li&gt;⭐《图解 TCP / IP》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大学课件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浙大计算机网络基础：https://github.com/QSCTech/zju-icicles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;尾声-1&#34;&gt;尾声&lt;/h3&gt;
&lt;p&gt;巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。&lt;/p&gt;
&lt;h2 id=&#34;阶段-3java-企业开发基础&#34;&gt;阶段 3：Java 企业开发基础&lt;/h2&gt;
&lt;h3 id=&#34;目标-2&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;面向薪资编程，学习实际后台开发工作要用的基础技术和框架，并能 &lt;strong&gt;独立&lt;/strong&gt; 做出一个具有完整功能的 Java Web 项目。&lt;/p&gt;
&lt;p&gt;学完这个阶段后，你应该已经能独立开发出大多数常见的后台系统了，比如各种管理系统、商城系统等。&lt;/p&gt;
&lt;h3 id=&#34;-mysql-数据库7-天&#34;&gt;🌕 MySQL 数据库（7 天）&lt;/h3&gt;
&lt;p&gt;企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。&lt;/p&gt;
&lt;h4 id=&#34;知识-6&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基本概念&lt;/li&gt;
&lt;li&gt;MySQL 搭建&lt;/li&gt;
&lt;li&gt;SQL 语句编写&lt;/li&gt;
&lt;li&gt;约束&lt;/li&gt;
&lt;li&gt;索引&lt;/li&gt;
&lt;li&gt;事务&lt;/li&gt;
&lt;li&gt;锁机制&lt;/li&gt;
&lt;li&gt;设计数据库表&lt;/li&gt;
&lt;li&gt;性能优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-7&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;其中，&lt;strong&gt;SQL 语句编写&lt;/strong&gt; 和 &lt;strong&gt;设计数据库表&lt;/strong&gt; 这两个能力一定要有！&lt;/p&gt;
&lt;p&gt;比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。&lt;/p&gt;
&lt;p&gt;这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-5&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;MySQL 索引的最左原则&lt;/li&gt;
&lt;li&gt;InnoDB 和 MyIsam 引擎的区别？&lt;/li&gt;
&lt;li&gt;有哪些优化数据库性能的方法？&lt;/li&gt;
&lt;li&gt;如何定位慢查询？&lt;/li&gt;
&lt;li&gt;MySQL 支持行锁还是表锁？分别有哪些优缺点？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-7&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;⭐ 老杜 - mysql入门基础 + 数据库实战：https://www.bilibili.com/video/BV1Vy4y1z7EX（较新、内容相对精炼，有习题）&lt;/li&gt;
&lt;li&gt;尚硅谷 - MySQL基础教程：https://www.bilibili.com/video/BV1xW411u7ax（小姐姐讲课，但感觉音质一般）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在线练习
&lt;ul&gt;
&lt;li&gt;⭐ SQL 自学网：http://xuesql.cn/&lt;/li&gt;
&lt;li&gt;⭐ SQL 在线运行：https://www.bejson.com/runcode/sql/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档
&lt;ul&gt;
&lt;li&gt;SQL - 菜鸟教程：https://www.runoob.com/sql/sql-tutorial.html&lt;/li&gt;
&lt;li&gt;MySQL - 菜鸟教程：https://www.runoob.com/mysql/mysql-tutorial.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网站
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.code-nav.cn/rd/?rid=b00064a76012546b016e274a3724c5f0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据库大全&lt;/a&gt;：果创云收录的各种数据库表设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-开发框架60-天&#34;&gt;🌕 开发框架（60 天）&lt;/h3&gt;
&lt;p&gt;Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。&lt;/p&gt;
&lt;p&gt;开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！&lt;/p&gt;
&lt;p&gt;不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。&lt;/p&gt;
&lt;p&gt;下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。&lt;/p&gt;
&lt;h4 id=&#34;知识-7&#34;&gt;知识&lt;/h4&gt;
&lt;h5 id=&#34;-java-web&#34;&gt;🌕 Java Web&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;描述：Java 网页应用开发基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一丢丢前端基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSON&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Servlet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Listener&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSTL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cookie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-spring-5&#34;&gt;🌕 Spring 5&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;描述：Java 轻量级应用框架&lt;/li&gt;
&lt;li&gt;IOC&lt;/li&gt;
&lt;li&gt;AOP&lt;/li&gt;
&lt;li&gt;事务&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-springmvc&#34;&gt;🌕 SpringMVC&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;描述：Java 轻量级 web 开发框架&lt;/li&gt;
&lt;li&gt;什么是 MVC？&lt;/li&gt;
&lt;li&gt;请求与响应&lt;/li&gt;
&lt;li&gt;Restful API&lt;/li&gt;
&lt;li&gt;拦截器&lt;/li&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;li&gt;执行过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-mybatis&#34;&gt;🌕 MyBatis&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;描述：数据访问框架，操作数据库进行增删改查等操作&lt;/li&gt;
&lt;li&gt;增删改查&lt;/li&gt;
&lt;li&gt;全局配置&lt;/li&gt;
&lt;li&gt;动态 SQL&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;和其他框架的整合&lt;/li&gt;
&lt;li&gt;逆向工程&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-mybatis-plus&#34;&gt;🌗 MyBatis Plus&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;描述：Mybatis 的增强工具，能够简化开发、提高效率&lt;/li&gt;
&lt;li&gt;引入&lt;/li&gt;
&lt;li&gt;通用 CRUD&lt;/li&gt;
&lt;li&gt;条件构造器&lt;/li&gt;
&lt;li&gt;代码生成器&lt;/li&gt;
&lt;li&gt;插件扩展&lt;/li&gt;
&lt;li&gt;自定义全局操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-springboot-2&#34;&gt;🌕 SpringBoot 2&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;描述：简化 Spring 应用的初始搭建以及开发过程，提高效率&lt;/li&gt;
&lt;li&gt;常用注解&lt;/li&gt;
&lt;li&gt;资源整合&lt;/li&gt;
&lt;li&gt;高级特性&lt;/li&gt;
&lt;li&gt;本地热部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-spring-security&#34;&gt;🌗 Spring Security&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;描述：Spring 的安全管理框架&lt;/li&gt;
&lt;li&gt;用户认证&lt;/li&gt;
&lt;li&gt;权限管理&lt;/li&gt;
&lt;li&gt;相关技术：Shiro&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-maven--gradle&#34;&gt;🌗 Maven / Gradle&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;描述：项目管理工具&lt;/li&gt;
&lt;li&gt;构建&lt;/li&gt;
&lt;li&gt;依赖管理&lt;/li&gt;
&lt;li&gt;插件&lt;/li&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;li&gt;子父工程&lt;/li&gt;
&lt;li&gt;多模块打包构建&lt;/li&gt;
&lt;li&gt;Nexus 私服搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-8&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。&lt;/p&gt;
&lt;p&gt;学这些技术的时候，&lt;strong&gt;千万不能懒&lt;/strong&gt; ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。&lt;/p&gt;
&lt;p&gt;学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 Spring Boot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。&lt;/p&gt;
&lt;p&gt;Maven / Gradle 当成工具用就好，面试基本不问，跟着框架教程去用就行了，急着找工作的话，先不用花太多时间去深入学。大厂面试问这个的也不多。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-6&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Spring 的 IOC 和 AOP 是什么，有哪些优点？&lt;/li&gt;
&lt;li&gt;Spring 框架用到了哪些设计模式？&lt;/li&gt;
&lt;li&gt;介绍 Spring Bean 的生命周期&lt;/li&gt;
&lt;li&gt;MyBatis 如何实现延迟加载？&lt;/li&gt;
&lt;li&gt;介绍 MyBatis 的多级缓存机制&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-8&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频（按顺序看）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷最新版 JavaWeb 全套教程：https://www.bilibili.com/video/BV1Y7411K7zz（前端部分最好也看下）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：https://www.bilibili.com/video/BV1Vf4y127N5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷 - SpringMVC 2021 最新教程：https://www.bilibili.com/video/BV1Ry4y1574R&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷 - MyBatis 实战教程全套完整版：https://www.bilibili.com/video/BV1mW411M737&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷 - MyBatisPlus 教程：https://www.bilibili.com/video/BV1Ds411E76Y&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maven 零基础入门教程：https://www.bilibili.com/video/BV1TW411g7hP（搞不懂 Maven 可以看看）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：https://www.bilibili.com/video/BV19K4y1L7MT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尚硅谷 - SpringSecurity 框架教程：https://www.bilibili.com/video/BV15a411A7kP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-开发规范3-天&#34;&gt;🌘 开发规范（3 天）&lt;/h3&gt;
&lt;p&gt;开发不规范，同事两行泪。&lt;/p&gt;
&lt;p&gt;开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。&lt;/p&gt;
&lt;h4 id=&#34;知识-8&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;代码规范
&lt;ul&gt;
&lt;li&gt;代码风格&lt;/li&gt;
&lt;li&gt;命名&lt;/li&gt;
&lt;li&gt;其他规则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码校验（CheckStyle）&lt;/li&gt;
&lt;li&gt;提交规范&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-9&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;有时间的话，简单过一遍大厂团队的代码规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范文档，再去遵守。&lt;/p&gt;
&lt;p&gt;项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。也可以直接利用开发工具自带的一些代码检查插件，帮忙养成好的编码习惯。&lt;/p&gt;
&lt;h4 id=&#34;资源-9&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 阿里巴巴 Java 开发手册：https://developer.aliyun.com/graph/java（搜索《Java开发手册》）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;华山版《Java开发手册》独家讲解：https://developer.aliyun.com/live/1201&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Java Style Guide：https://google.github.io/styleguide/javaguide.html（谷歌 Java 代码规范）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-git3-天&#34;&gt;🌕 Git（3 天）&lt;/h3&gt;
&lt;p&gt;此前大家可能听说过 GitHub，一流的代码开源托管平台。&lt;/p&gt;
&lt;p&gt;Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。&lt;/p&gt;
&lt;p&gt;无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。&lt;/p&gt;
&lt;h4 id=&#34;知识-9&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;区分 Git 和 GitHub&lt;/li&gt;
&lt;li&gt;工作区&lt;/li&gt;
&lt;li&gt;分支&lt;/li&gt;
&lt;li&gt;代码提交、推送、拉取、回退、重置&lt;/li&gt;
&lt;li&gt;分支操作&lt;/li&gt;
&lt;li&gt;代码合并、解决冲突&lt;/li&gt;
&lt;li&gt;标签&lt;/li&gt;
&lt;li&gt;cherry-pick&lt;/li&gt;
&lt;li&gt;Git Flow&lt;/li&gt;
&lt;li&gt;相关技术：SVN（比较老）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-10&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;每个命令跟着敲一遍，有个大致的印象，会用即可。&lt;/p&gt;
&lt;p&gt;建议平时大家可以多把自己的代码使用 Git 命令上传到 GitHub 上，用的多了自然就熟悉了。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-7&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;如何解决提交冲突？&lt;/li&gt;
&lt;li&gt;提交不小心出现误操作，如何撤销？&lt;/li&gt;
&lt;li&gt;什么是 Git Flow，它有什么好处？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-10&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1vy4y1s7k6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/video/BV1vy4y1s7k6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;猴子都能懂的 Git 入门 &lt;a class=&#34;link&#34; href=&#34;https://backlog.com/git-tutorial/cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://backlog.com/git-tutorial/cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⭐ GitHub 漫游指南 &lt;a class=&#34;link&#34; href=&#34;https://github.phodal.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.phodal.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 官方文档：https://docs.github.com/cn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游戏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning Git Branching：https://learngitbranching.js.org/?locale=zh_CN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-linux10-天&#34;&gt;🌖 Linux（10 天）&lt;/h3&gt;
&lt;p&gt;企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。&lt;/p&gt;
&lt;p&gt;后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。&lt;/p&gt;
&lt;h4 id=&#34;知识-10&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Linux 系统安装&lt;/li&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;li&gt;文件管理&lt;/li&gt;
&lt;li&gt;用户管理&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;磁盘管理&lt;/li&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;网络管理&lt;/li&gt;
&lt;li&gt;软件包管理&lt;/li&gt;
&lt;li&gt;服务管理&lt;/li&gt;
&lt;li&gt;日志管理&lt;/li&gt;
&lt;li&gt;Linux 内核&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常用命令&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常用环境搭建&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shell 脚本编程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VIM 的使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-11&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。&lt;/p&gt;
&lt;p&gt;一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。&lt;/p&gt;
&lt;p&gt;每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。&lt;/p&gt;
&lt;p&gt;记不住没关系，用文档查就行了。&lt;/p&gt;
&lt;p&gt;先会用，再理解。一般面试问的 Linux 题目也不会很难，面试前去背一下八股文就没什么问题，感兴趣的话可以去看看 Linux 内核设计。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-8&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;如何查看某个进程的运行状态？&lt;/li&gt;
&lt;li&gt;如何在 Linux 上查看 2 G 的大文件？&lt;/li&gt;
&lt;li&gt;Linux 软链接和硬链接的区别&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-11&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 2021 韩顺平 一周学会Linux &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1Sv411r7vd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/video/BV1Sv411r7vd&lt;/a&gt;（基于 CentOS 7.6 版本较新）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《鸟哥的 Linux 私房菜 —— 基础篇》http://cn.linux.vbird.org/linux_basic/linux_basic.php（经典）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 工具快速教程：https://linuxtools-rst.readthedocs.io（基础、工具进阶、工具参考）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实战&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 蓝桥云课 Linux 基础入门：https://www.lanqiao.cn/courses/1&lt;/li&gt;
&lt;li&gt;腾讯云动手实验室：https://cloud.tencent.com/developer/labs&lt;/li&gt;
&lt;li&gt;阿里云体验实验室：https://developer.aliyun.com/adc/labs/&lt;/li&gt;
&lt;li&gt;阿里云知行实验室：https://start.aliyun.com/&lt;/li&gt;
&lt;li&gt;华为云沙箱实验室：https://lab.huaweicloud.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;社区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux 中国：https://linux.cn/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Linux 命令搜索：https://wangchujiang.com/linux-command&lt;/li&gt;
&lt;li&gt;Linux 命令大全手册：https://www.linuxcool.com/&lt;/li&gt;
&lt;li&gt;Linux 命令示例：http://linux-commands-examples.com/&lt;/li&gt;
&lt;li&gt;宝塔 Linux 面板：https://www.bt.cn/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-前端基础14-天&#34;&gt;🌘 前端基础（14 天）&lt;/h3&gt;
&lt;p&gt;虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。&lt;/p&gt;
&lt;h4 id=&#34;知识-11&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript
&lt;ul&gt;
&lt;li&gt;Ajax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-12&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。&lt;/p&gt;
&lt;h4 id=&#34;资源-12&#34;&gt;资源&lt;/h4&gt;
&lt;p&gt;参见鱼皮原创的前端学习路线：https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ&lt;/p&gt;
&lt;h3 id=&#34;练手项目-1&#34;&gt;练手项目&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HotelSystem：https://github.com/misterchaos/HotelSystem（酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架）&lt;/li&gt;
&lt;li&gt;超市管理系统：https://github.com/zhanglei-workspace/shopping-management-system&lt;/li&gt;
&lt;li&gt;Mall4j：https://github.com/gz-yami/mall4j（Spring Boot 电商系统）&lt;/li&gt;
&lt;li&gt;newbee-mall：https://github.com/newbee-ltd/newbee-mall（基于 Spring Boot 2.X 的全栈电商系统）&lt;/li&gt;
&lt;li&gt;litemall：https://github.com/linlinjava/litemall（小商城系统，Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）&lt;/li&gt;
&lt;li&gt;forum-java：https://github.com/Qbian61/forum-java（一款用 Java Spring Boot 实现的现代化社区系统）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;尾声-2&#34;&gt;尾声&lt;/h3&gt;
&lt;p&gt;学完这个阶段的知识后，一定要再串起来回忆一遍，必须自己独立开发一个 Java Web 项目（量级可以不大，但你学过的技术尽可能地用上），能发布到 Linux 服务器上让其他小伙伴访问就更好了~&lt;/p&gt;
&lt;p&gt;如果你只是对 Java 感兴趣、或者只是想试着自己开发后台，并不是想靠 Java 找工作的话，学到这里就可以了。可以把更多时间投入到你主方向的学习中。&lt;/p&gt;
&lt;p&gt;但如果你是想找 Java 方向的工作，尤其是想进大厂的话，一定要继续努力，用心学习下个阶段的企业开发进阶知识。&lt;/p&gt;
&lt;h2 id=&#34;阶段-4java-企业开发进阶&#34;&gt;阶段 4：Java 企业开发进阶&lt;/h2&gt;
&lt;h3 id=&#34;目标-3&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，&lt;strong&gt;解决实际问题&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;要了解为什么需要这个技术？什么时候用这个技术？某个需求该用哪些技术？&lt;/p&gt;
&lt;p&gt;当然，这个阶段的内容有些过于丰富，不是所有的东西都要学，大家可以根据自己的实际情况（时间），有选择地学习。&lt;/p&gt;
&lt;h3 id=&#34;-软件工程&#34;&gt;🌘 软件工程&lt;/h3&gt;
&lt;p&gt;软件开发和管理的一些概念、原则、技术、方法、工具和经验。&lt;/p&gt;
&lt;h4 id=&#34;知识-12&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;软件的本质&lt;/li&gt;
&lt;li&gt;软件特性&lt;/li&gt;
&lt;li&gt;软件过程&lt;/li&gt;
&lt;li&gt;软件开发原则
&lt;ul&gt;
&lt;li&gt;开闭原则&lt;/li&gt;
&lt;li&gt;里氏替换原则&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;/li&gt;
&lt;li&gt;单一职责原则&lt;/li&gt;
&lt;li&gt;接口隔离原则&lt;/li&gt;
&lt;li&gt;迪米特法则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件过程模型&lt;/li&gt;
&lt;li&gt;敏捷开发&lt;/li&gt;
&lt;li&gt;软件开发模型&lt;/li&gt;
&lt;li&gt;需求建模&lt;/li&gt;
&lt;li&gt;软件设计&lt;/li&gt;
&lt;li&gt;UML&lt;/li&gt;
&lt;li&gt;体系结构设计&lt;/li&gt;
&lt;li&gt;设计模式&lt;/li&gt;
&lt;li&gt;软件质量管理&lt;/li&gt;
&lt;li&gt;评审&lt;/li&gt;
&lt;li&gt;软件质量保证&lt;/li&gt;
&lt;li&gt;软件测试
&lt;ul&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;集成测试&lt;/li&gt;
&lt;li&gt;系统测试&lt;/li&gt;
&lt;li&gt;压力测试&lt;/li&gt;
&lt;li&gt;部署测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件配置管理&lt;/li&gt;
&lt;li&gt;软件项目管理&lt;/li&gt;
&lt;li&gt;软件项目估算&lt;/li&gt;
&lt;li&gt;项目进度安排&lt;/li&gt;
&lt;li&gt;风险管理&lt;/li&gt;
&lt;li&gt;软件过程改进
&lt;ul&gt;
&lt;li&gt;成熟度模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-13&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;大学软件专业的必修课，偏理论，能学到很多企业软件开发的方法，也是对软件开发同学综合能力的提升，有时间的话可以了解下。但对想要快速找工作的同学来说，忽略即可，面试基本不会问。&lt;/p&gt;
&lt;h4 id=&#34;资源-13&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《软件工程：实践者的研究方法》：https://book.douban.com/subject/6047742/（经典大黑书，讲的非常全面，但同样完整读下来还是有些难度的）&lt;/li&gt;
&lt;li&gt;《软件开发的 201 个原则》：https://book.douban.com/subject/35628886/（工具书，看一遍挺好的）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清华大学软件工程：https://www.bilibili.com/video/BV1eE411V7Cr&lt;/li&gt;
&lt;li&gt;北京大学软件工程：https://www.bilibili.com/video/BV1Vt411V72G&lt;/li&gt;
&lt;li&gt;大连工业大学软件工程：https://www.bilibili.com/video/BV1Ns41177VM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大学课件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浙大计算机软件工程：https://github.com/QSCTech/zju-icicles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-设计模式21-天&#34;&gt;🌖 设计模式（21 天）&lt;/h3&gt;
&lt;p&gt;设计模式是软件开发中解决一类问题的通用方法。&lt;/p&gt;
&lt;p&gt;使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。&lt;/p&gt;
&lt;h4 id=&#34;知识-13&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;工厂方法模式&lt;/li&gt;
&lt;li&gt;抽象工厂&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构型模式：把类或对象结合在一起形成一个更大的结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适配器模式&lt;/li&gt;
&lt;li&gt;组合模式&lt;/li&gt;
&lt;li&gt;装饰器模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;li&gt;享元模式&lt;/li&gt;
&lt;li&gt;外观模式&lt;/li&gt;
&lt;li&gt;桥接模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行为型模式：类和对象如何交互，及划分责任和算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;迭代器模式&lt;/li&gt;
&lt;li&gt;模板方法模式&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;命令模式&lt;/li&gt;
&lt;li&gt;状态模式&lt;/li&gt;
&lt;li&gt;责任链模式&lt;/li&gt;
&lt;li&gt;备忘录模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;访问者模式&lt;/li&gt;
&lt;li&gt;中介者模式&lt;/li&gt;
&lt;li&gt;解释器模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-14&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-9&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;单例模式有哪些实现方式？有哪些优缺点？请手写其中一种&lt;/li&gt;
&lt;li&gt;你用过哪些设计模式，为什么用它？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-14&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）&lt;/li&gt;
&lt;li&gt;《Head First 设计模式》&lt;/li&gt;
&lt;li&gt;《大话设计模式》&lt;/li&gt;
&lt;li&gt;《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尚硅谷图解 Java 设计模式：https://www.bilibili.com/video/BV1G4411c7N4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;菜鸟教程：https://www.runoob.com/design-pattern/design-pattern-tutorial.html&lt;/li&gt;
&lt;li&gt;图说设计模式：https://design-patterns.readthedocs.io/zh_CN/latest/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-缓存14-天&#34;&gt;🌕 缓存（14 天）&lt;/h3&gt;
&lt;p&gt;缓存是高并发系统不可或缺的技术，可以提高系统的性能和并发，因此是后台开发必学的知识点，也是面试重点。&lt;/p&gt;
&lt;h4 id=&#34;知识-14&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么是缓存？&lt;/li&gt;
&lt;li&gt;本地缓存
&lt;ul&gt;
&lt;li&gt;Caffeine 库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多级缓存&lt;/li&gt;
&lt;li&gt;Redis 分布式缓存
&lt;ul&gt;
&lt;li&gt;数据类型&lt;/li&gt;
&lt;li&gt;常用操作&lt;/li&gt;
&lt;li&gt;Java 操作 Redis
&lt;ul&gt;
&lt;li&gt;Spring Boot Redis Template&lt;/li&gt;
&lt;li&gt;Redisson&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主从模型搭建&lt;/li&gt;
&lt;li&gt;哨兵集群搭建&lt;/li&gt;
&lt;li&gt;日志持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存（Redis）应用场景
&lt;ul&gt;
&lt;li&gt;数据共享&lt;/li&gt;
&lt;li&gt;单点登录&lt;/li&gt;
&lt;li&gt;计数器&lt;/li&gt;
&lt;li&gt;限流&lt;/li&gt;
&lt;li&gt;点赞&lt;/li&gt;
&lt;li&gt;实时排行榜&lt;/li&gt;
&lt;li&gt;分布式锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存常见问题
&lt;ul&gt;
&lt;li&gt;缓存雪崩&lt;/li&gt;
&lt;li&gt;缓存击穿&lt;/li&gt;
&lt;li&gt;缓存穿透&lt;/li&gt;
&lt;li&gt;缓存更新一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相关技术：Memcached、Ehcache&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-15&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;学会如何简单地使用缓存并不难，和数据库类似，无非就是调用 API 对数据进行增删改查。&lt;/p&gt;
&lt;p&gt;因此，建议先能够独立使用它，了解缓存的应用场景；再学习如何在 Java 中操作缓存中间件，并尝试和项目相结合，提高系统的性能。&lt;/p&gt;
&lt;p&gt;跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-10&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Redis 为什么快？&lt;/li&gt;
&lt;li&gt;Redis 有哪些常用的数据结构？&lt;/li&gt;
&lt;li&gt;Redis RDB 和 AOF 持久化的区别，如何选择？&lt;/li&gt;
&lt;li&gt;如何解决缓存击穿、缓存穿透、雪崩问题？&lt;/li&gt;
&lt;li&gt;如何用 Redis 实现点赞功能，怎么设计 Key / Value？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-15&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：https://www.bilibili.com/video/BV1Rv41177Af（基于 Redis 6 的，推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档
&lt;ul&gt;
&lt;li&gt;Redis 命令参考：http://redisdoc.com/&lt;/li&gt;
&lt;li&gt;Redis 面试题整理：https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书籍
&lt;ul&gt;
&lt;li&gt;《Redis 实战》（经典）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工具
&lt;ul&gt;
&lt;li&gt;⭐ Redis 在线练习：https://try.redis.io/（强烈推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-消息队列14-天&#34;&gt;🌖 消息队列（14 天）&lt;/h3&gt;
&lt;p&gt;消息队列是用于传输和保存消息的容器，也是大型分布式系统中常用的技术，主要解决应用耦合、异步消息、流量削锋等问题。后台开发必学，也是面试重点。&lt;/p&gt;
&lt;h4 id=&#34;知识-15&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;消息队列的作用&lt;/li&gt;
&lt;li&gt;RabbitMQ 消息队列
&lt;ul&gt;
&lt;li&gt;生产消费模型&lt;/li&gt;
&lt;li&gt;交换机模型&lt;/li&gt;
&lt;li&gt;死信队列&lt;/li&gt;
&lt;li&gt;延迟队列&lt;/li&gt;
&lt;li&gt;消息持久化&lt;/li&gt;
&lt;li&gt;Java 操作&lt;/li&gt;
&lt;li&gt;集群搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相关技术：Kafka、ActiveMQ、TubeMQ、RocketMQ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-16&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;和缓存一样，学会如何使用消息队列并不难，无非就是调用 API 去生产、转发和消费消息。&lt;/p&gt;
&lt;p&gt;因此，建议先能够独立使用它，了解消息队列的应用场景；再学习如何在 Java 中操作消息队列中间件，并尝试和项目相结合，感受消息队列带来的好处。&lt;/p&gt;
&lt;p&gt;这里我建议初学者先学习 RabbitMQ，比 Kafka 要好理解一些。跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-11&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;使用消息队列有哪些优缺点？&lt;/li&gt;
&lt;li&gt;如何保证消息消费的幂等性？&lt;/li&gt;
&lt;li&gt;消息队列有哪些路由模型？&lt;/li&gt;
&lt;li&gt;你是否用过消息队列，解决过什么问题？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-16&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：https://www.bilibili.com/video/BV1cb4y1o7zz（很新很全面）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档
&lt;ul&gt;
&lt;li&gt;RabbitMQ 中文文档：http://rabbitmq.mr-ping.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书籍
&lt;ul&gt;
&lt;li&gt;《RabbitMQ 实战：高效部署分布式消息队列》（经典）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工具
&lt;ul&gt;
&lt;li&gt;⭐ RabbitMQ 在线模拟器：http://tryrabbitmq.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-nginx14-天&#34;&gt;🌖 Nginx（14 天）&lt;/h3&gt;
&lt;p&gt;Nginx 是主流的、开源的、高性能的 HTTP 和反向代理 web 服务器，可以用于挂载网站、请求转发、负载均衡、网关路由等。前后端开发同学都需要学习，在后端开发的面试中有时会考到。&lt;/p&gt;
&lt;h4 id=&#34;知识-16&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Nginx 作用&lt;/li&gt;
&lt;li&gt;正向代理&lt;/li&gt;
&lt;li&gt;反向代理（负载均衡）&lt;/li&gt;
&lt;li&gt;常用命令&lt;/li&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;li&gt;动静分离（网站部署）&lt;/li&gt;
&lt;li&gt;集群搭建&lt;/li&gt;
&lt;li&gt;相关技术：HAProxy、Apache&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-17&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;Nginx 的基本使用非常简单，甚至不需要看任何的视频，跟着一篇文章就能够用它来提供网站访问能力、实现反向代理。&lt;/p&gt;
&lt;p&gt;但是在企业中，Nginx 的使用往往没那么简单，作为负载均衡、请求转发的重要组件，往往需要针对实际场景去写一些特定的配置。因此建议有时间的话，实践下 Nginx 的配置方法，了解 Nginx 基本的设计思想，对今后自己设计系统时也有帮助。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-12&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Nginx 有哪些作用？&lt;/li&gt;
&lt;li&gt;Nginx 为什么支持高并发？&lt;/li&gt;
&lt;li&gt;Nginx 有哪些负载均衡策略？&lt;/li&gt;
&lt;li&gt;什么是 Nginx 惊群问题，如何解决它？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-17&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;⭐ 尚硅谷 - Nginx 教程由浅入深：https://www.bilibili.com/video/BV1zJ411w7SV（讲的比较全面）&lt;/li&gt;
&lt;li&gt;⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：https://www.bilibili.com/video/BV1rU4y1J785/ （简单演示 Nginx 部署网站）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档
&lt;ul&gt;
&lt;li&gt;Nginx 中文文档：https://www.nginx.cn/doc/index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工具
&lt;ul&gt;
&lt;li&gt;Nginx 配置在线生成：https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-netty-网络编程21-天&#34;&gt;🌗 Netty 网络编程（21 天）&lt;/h3&gt;
&lt;p&gt;开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。&lt;/p&gt;
&lt;p&gt;很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。&lt;/p&gt;
&lt;h4 id=&#34;知识-17&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IO 模型（BIO / NIO）&lt;/li&gt;
&lt;li&gt;Channel&lt;/li&gt;
&lt;li&gt;Buffer&lt;/li&gt;
&lt;li&gt;Seletor&lt;/li&gt;
&lt;li&gt;Netty 模型&lt;/li&gt;
&lt;li&gt;WebSocket 编程（动手做个聊天室）&lt;/li&gt;
&lt;li&gt;相关技术：Vertx（中文文档：http://vertxchina.github.io/vertx-translation-chinese/，比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-18&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。&lt;/p&gt;
&lt;p&gt;还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 背后的思想（比如 NIO）而非框架本身的语法细节。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-13&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Netty 有哪些优点？&lt;/li&gt;
&lt;li&gt;什么是 NIO？&lt;/li&gt;
&lt;li&gt;介绍 Netty 的零拷贝机制&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-18&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷Netty教程：https://www.bilibili.com/video/BV1DJ411m7NR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netty 技术演讲（中文字幕版）：https://www.youtube.com/watch?v=I8yy2Cy7dDI&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Netty 4 用户指南：https://www.w3cschool.cn/netty_4_user_guide/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Netty 实战》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-微服务60-天&#34;&gt;🌖 微服务（60 天）&lt;/h3&gt;
&lt;p&gt;随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。&lt;/p&gt;
&lt;p&gt;因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。&lt;/p&gt;
&lt;p&gt;换言之，想做大型项目，这块儿一定要好好学！&lt;/p&gt;
&lt;h4 id=&#34;知识-18&#34;&gt;知识&lt;/h4&gt;
&lt;h5 id=&#34;dubbo&#34;&gt;Dubbo&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;架构演进&lt;/li&gt;
&lt;li&gt;RPC&lt;/li&gt;
&lt;li&gt;Zookeeper&lt;/li&gt;
&lt;li&gt;服务提供者&lt;/li&gt;
&lt;li&gt;服务消费者&lt;/li&gt;
&lt;li&gt;项目搭建&lt;/li&gt;
&lt;li&gt;相关技术：DubboX（对 Dubbo 的扩展）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-微服务&#34;&gt;🌖 微服务&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;微服务概念&lt;/li&gt;
&lt;li&gt;Spring Cloud 框架
&lt;ul&gt;
&lt;li&gt;子父工程&lt;/li&gt;
&lt;li&gt;服务注册与发现&lt;/li&gt;
&lt;li&gt;注册中心 Eureka、Zookeeper、Consul&lt;/li&gt;
&lt;li&gt;Ribbon 负载均衡&lt;/li&gt;
&lt;li&gt;Feign 服务调用&lt;/li&gt;
&lt;li&gt;Hystrix 服务限流、降级、熔断&lt;/li&gt;
&lt;li&gt;Resilience4j 服务容错&lt;/li&gt;
&lt;li&gt;Gateway（Zuul）微服务网关&lt;/li&gt;
&lt;li&gt;Config 分布式配置中心&lt;/li&gt;
&lt;li&gt;分布式服务总线&lt;/li&gt;
&lt;li&gt;Sleuth + Zipkin 分布式链路追踪&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring Cloud Alibaba
&lt;ul&gt;
&lt;li&gt;Nacos 注册、配置中心&lt;/li&gt;
&lt;li&gt;OpenFeign 服务调用&lt;/li&gt;
&lt;li&gt;Sentinel 流控&lt;/li&gt;
&lt;li&gt;Seata 分布式事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;接口管理&#34;&gt;接口管理&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Swagger 接口文档&lt;/li&gt;
&lt;li&gt;Postman 接口测试&lt;/li&gt;
&lt;li&gt;相关技术：YApi、ShowDoc&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-19&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。学完 Spring Cloud 全家桶后，再去学 Spring Cloud Alibaba 就很简单了。&lt;/p&gt;
&lt;p&gt;这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。&lt;/p&gt;
&lt;p&gt;分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。&lt;/p&gt;
&lt;p&gt;大厂面试的时候很少问 Spring Cloud 框架的细节，更多的是微服务以及各组件的一些思想，比如网关的好处、消息总线的好处等。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-14&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;什么是微服务，有哪些优缺点？&lt;/li&gt;
&lt;li&gt;什么是注册中心，能解决什么问题？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-19&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷 Dubbo 教程：https://www.bilibili.com/video/BV1ns411c7jV&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷 SpringCloud（H版&amp;amp;alibaba）框架开发教程（微服务分布式架构）：https://www.bilibili.com/video/BV18E411x7eT（把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache Dubbo 官方文档：https://dubbo.apache.org/zh/&lt;/li&gt;
&lt;li&gt;Spring Cloud Alibaba 官方文档：https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md&lt;/li&gt;
&lt;li&gt;⭐ Swagger 教学文档：https://doc.xiaominfo.com/（跟着快速开始直接用就好了）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-容器7-天&#34;&gt;🌖 容器（7 天）&lt;/h3&gt;
&lt;p&gt;将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。&lt;/p&gt;
&lt;p&gt;便于实现微服务、持续集成和交付。&lt;/p&gt;
&lt;h4 id=&#34;知识-19&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🌖 Docker
&lt;ul&gt;
&lt;li&gt;容器概念&lt;/li&gt;
&lt;li&gt;镜像&lt;/li&gt;
&lt;li&gt;部署服务&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;Docker Machine&lt;/li&gt;
&lt;li&gt;Docker Swarm&lt;/li&gt;
&lt;li&gt;多阶段构建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;🌘 K8S（Kubernetes）
&lt;ul&gt;
&lt;li&gt;K8S 架构&lt;/li&gt;
&lt;li&gt;工作负载
&lt;ul&gt;
&lt;li&gt;资源类型&lt;/li&gt;
&lt;li&gt;Pod&lt;/li&gt;
&lt;li&gt;Pod 生命周期&lt;/li&gt;
&lt;li&gt;Pod 安全策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;K8S 组件&lt;/li&gt;
&lt;li&gt;K8S 对象&lt;/li&gt;
&lt;li&gt;部署应用&lt;/li&gt;
&lt;li&gt;服务
&lt;ul&gt;
&lt;li&gt;Ingress&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubectl 命令行&lt;/li&gt;
&lt;li&gt;集群管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相关技术：Apache Mesos、Mesosphere&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-20&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;业务上云是趋势，但是对于开发同学来说，会用 Docker / K8S 部署项目和服务就行。实际工作中，企业一般都有现成的平台直接用，面试考察的也不多，不用花太多时间。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-15&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;什么是容器？&lt;/li&gt;
&lt;li&gt;使用  Docker 有哪些好处？&lt;/li&gt;
&lt;li&gt;如何快速启动多个 Docker 节点？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-20&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐【狂神说】Docker 最新超详细版教程通俗易懂：https://www.bilibili.com/video/BV1og4y1q7M4&lt;/li&gt;
&lt;li&gt;K8S 视频教程：https://www.bilibili.com/video/BV1K5411N7j8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《深入浅出 Docker》：https://www.zhihu.com/pub/reader/119632192&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker — 从入门到实践：https://vuepress.mirror.docker-practice.com/&lt;/li&gt;
&lt;li&gt;菜鸟教程 Docker：https://www.runoob.com/docker/docker-tutorial.html&lt;/li&gt;
&lt;li&gt;国外 Docker 官方文档：https://docs.docker.com/get-started/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker 中文社区：https://www.docker.org.cn/（强烈推荐，有很多 Docker 技术文章和学习笔记）&lt;/li&gt;
&lt;li&gt;Docker Blog：https://www.docker.com/blog/（国外 Docker 技术博客）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;镜像源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Hub：https://hub.docker.com&lt;/li&gt;
&lt;li&gt;腾讯软件源：http://mirrors.tencent.com/#/index&lt;/li&gt;
&lt;li&gt;阿里云 Docker 仓库：https://cr.console.aliyun.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-ci--cd3-天&#34;&gt;🌗 CI / CD（3 天）&lt;/h3&gt;
&lt;p&gt;持续集成 / 持续交付，贯穿整个研发到项目上线的过程，提高效率。&lt;/p&gt;
&lt;p&gt;大公司一般都有自己的 CI / CD 平台。&lt;/p&gt;
&lt;h4 id=&#34;知识-20&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么是 CI / CD&lt;/li&gt;
&lt;li&gt;CI / CD 有什么好处&lt;/li&gt;
&lt;li&gt;使用任一 CI / CD 平台&lt;/li&gt;
&lt;li&gt;相关技术：Jenkins、GitLab、微信云托管&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-21&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;了解它是什么，并且实战使用任一 CI / CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。&lt;/p&gt;
&lt;p&gt;真正要自己去搭建的时候，跟着官方文档来就行。&lt;/p&gt;
&lt;h4 id=&#34;资源-21&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐【狂神说】CI/CD到底是什么？十分钟理解企业级DevOps：https://www.bilibili.com/video/BV1zf4y127vu（讲的非常棒！带你快速理解 CI / CD 的作用和部分原理）&lt;/li&gt;
&lt;li&gt;尚硅谷 - Jenkins 持续集成工具教程：https://www.bilibili.com/video/BV1GW411w7pn（实在要用到 Jenkins 再去学）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins 官方文档：https://www.jenkins.io/zh/ （有很多案例，要用的时候查一下就行了）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实战平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 微信云托管：https://cloud.weixin.qq.com/cloudrun（直播演示过，鱼皮后面会给大家出视频教程）&lt;/li&gt;
&lt;li&gt;前端托管 Webify：https://cloud.tencent.com/product/webify（鱼皮给大家出过视频教程的 &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV11V411p7vf/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/video/BV11V411p7vf/&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;练手项目-2&#34;&gt;练手项目&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mall-learning：https://github.com/macrozheng/mall-learningmall（学习教程，架构、业务、技术要点全方位解析）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;miaosha：https://github.com/qiurunze123/miaosha （秒杀系统设计与实现）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mall：https://github.com/macrozheng/mall（包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring-Cloud-Admin：https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin（基于 Spring Cloud 微服务化开发平台，具有统一授权、认证的后台管理系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;paascloud-master：https://github.com/paascloud/paascloud-master（基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mall-swarm：https://github.com/macrozheng/mall-swarm（一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SecKill：https://github.com/hfbin/Seckill（基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jeecg-boot：https://github.com/zhangdaiscott/jeecg-boot（低代码开发平台）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PassJava-Platform：https://github.com/Jackson0714/PassJava-Platform（一款面试刷题的 Spring Cloud 开源系统）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;尾声-3&#34;&gt;尾声&lt;/h3&gt;
&lt;p&gt;看到这里，相信你已经感叹：编程语言一辈子学不完了！&lt;/p&gt;
&lt;p&gt;但是，不用担心，通过对这么多知识点的学习，相信你已经有了一定的积累，也不知不觉地锻炼了自主学习能力、资源检索能力、代码阅读能力、问题解决能力，之后的学习会越来越轻松。&lt;/p&gt;
&lt;p&gt;接下来，可以试着用你学到的技术来解决实际的问题，自主从 0 开始做一些项目，保持编程手感。&lt;/p&gt;
&lt;h2 id=&#34;阶段-5项目实战&#34;&gt;阶段 5：项目实战&lt;/h2&gt;
&lt;h3 id=&#34;目标-4&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。&lt;/p&gt;
&lt;h3 id=&#34;学习建议-22&#34;&gt;学习建议&lt;/h3&gt;
&lt;p&gt;其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。&lt;/p&gt;
&lt;p&gt;有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。&lt;/p&gt;
&lt;p&gt;暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！&lt;/p&gt;
&lt;p&gt;有能力的朋友也可以试着用 GitHub 上的源码来学习啦~&lt;/p&gt;
&lt;p&gt;做一个完整的项目的确很不容易，建议大家根据自己的 &lt;strong&gt;时间、兴趣&lt;/strong&gt; 选择 &lt;strong&gt;较新的&lt;/strong&gt;、&lt;strong&gt;有配套源码的&lt;/strong&gt; 教程，保持耐心。&lt;/p&gt;
&lt;p&gt;如何选择编程学习资源，可以看下我的原创文章：https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA&lt;/p&gt;
&lt;p&gt;下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。&lt;/p&gt;
&lt;h3 id=&#34;视频教程&#34;&gt;视频教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：https://www.bilibili.com/video/BV1dQ4y1A75e（全栈项目，前后端讲得都很全面）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：https://www.bilibili.com/video/BV1bE411T7oZ（500 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑马 - 24 小时搞定 Java 毕设电商项目：https://www.bilibili.com/video/BV13f4y1r7fS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：https://www.bilibili.com/video/BV1Bo4y117zV&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：https://www.bilibili.com/video/BV1Ub4y1f7rk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：https://www.bilibili.com/video/BV18A411L7UX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：https://www.bilibili.com/video/BV17v411V79c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑马程序员 Java 项目《好客租房》：https://www.bilibili.com/video/BV1sZ4y1F7PD&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用类库&#34;&gt;常用类库&lt;/h3&gt;
&lt;h5 id=&#34;工具&#34;&gt;工具&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Guava：谷歌开发的 Java 工具库（https://github.com/google/guava）&lt;/li&gt;
&lt;li&gt;Apache Commons：各类工具库，比如 commons-lang、commons-io、commons-collections 等（https://github.com/apache/commons-lang）&lt;/li&gt;
&lt;li&gt;Hutool：Java 工具集库（https://github.com/looly/hutool）&lt;/li&gt;
&lt;li&gt;Lombok：Java 增强库（https://github.com/projectlombok/lombok）&lt;/li&gt;
&lt;li&gt;Apache HttpComponents Client：HTTP 客户端库（https://github.com/apache/httpcomponents-client）&lt;/li&gt;
&lt;li&gt;OkHttp：适用于 JVM、Android 等平台的 Http 客户端（https://github.com/square/okhttp）&lt;/li&gt;
&lt;li&gt;Gson：谷歌的 JSON 处理库（https://github.com/google/gson）&lt;/li&gt;
&lt;li&gt;Jcommander：Java 命令行参数解析框架（https://github.com/cbeust/jcommander）&lt;/li&gt;
&lt;li&gt;Apache PDFBox：PDF 操作库（https://github.com/apache/pdfbox）&lt;/li&gt;
&lt;li&gt;EasyExcel：阿里的 Excel 处理库（https://github.com/alibaba/easyexcel）&lt;/li&gt;
&lt;li&gt;Apache POI：表格文件处理库（https://github.com/apache/poi）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;测试&#34;&gt;测试&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;JUnit：Java 测试框架（https://github.com/junit-team/junit4）&lt;/li&gt;
&lt;li&gt;Mockito：Java 单元测试 Mock 框架（https://github.com/mockito/mockito）&lt;/li&gt;
&lt;li&gt;Selenium：浏览器自动化框架（https://github.com/SeleniumHQ/selenium）&lt;/li&gt;
&lt;li&gt;htmlunit：Java 模拟浏览器（https://github.com/HtmlUnit/htmlunit）&lt;/li&gt;
&lt;li&gt;TestNG：Java 测试框架（https://github.com/cbeust/testng）&lt;/li&gt;
&lt;li&gt;Jacoco：Java 代码覆盖度库（https://github.com/jacoco/jacoco）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;其他&#34;&gt;其他&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;cglib：字节码生成库（https://github.com/cglib/cglib）&lt;/li&gt;
&lt;li&gt;Arthas：Java 诊断工具（https://github.com/alibaba/arthas）&lt;/li&gt;
&lt;li&gt;config：针对 JVM 的配置库（https://github.com/lightbend/config）&lt;/li&gt;
&lt;li&gt;Quasar：Java 纤程库（https://github.com/puniverse/quasar）&lt;/li&gt;
&lt;li&gt;drools：Java 规则引擎（https://github.com/kiegroup/drools）&lt;/li&gt;
&lt;li&gt;Caffeine：Java 高性能缓存库（https://github.com/ben-manes/caffeine）&lt;/li&gt;
&lt;li&gt;Disruptor：高性能线程间消息传递库（https://github.com/LMAX-Exchange/disruptor）&lt;/li&gt;
&lt;li&gt;Knife4j：Swagger 文档增强（https://doc.xiaominfo.com/）&lt;/li&gt;
&lt;li&gt;Thumbnailator：Java 缩略图生成库（https://github.com/coobird/thumbnailator）&lt;/li&gt;
&lt;li&gt;Logback：Java 日志库（https://github.com/qos-ch/logback）&lt;/li&gt;
&lt;li&gt;Apache Camel：消息传输集成框架（https://github.com/apache/camel）&lt;/li&gt;
&lt;li&gt;Quartz：定时任务调度库（https://github.com/quartz-scheduler/quartz）&lt;/li&gt;
&lt;li&gt;Apache Mahout：机器学习库（https://github.com/apache/mahout）&lt;/li&gt;
&lt;li&gt;Apache OpenNLP：NLP 工具库（https://github.com/apache/opennlp）&lt;/li&gt;
&lt;li&gt;RxJava：JVM 反应式编程框架（https://github.com/ReactiveX/RxJava）&lt;/li&gt;
&lt;li&gt;JProfiler：性能分析库（https://www.ej-technologies.com/products/jprofiler/overview.html）&lt;/li&gt;
&lt;li&gt;jsoup：HTML 文档解析库（https://jsoup.org/）&lt;/li&gt;
&lt;li&gt;webmagic：Java 爬虫框架（https://github.com/code4craft/webmagic/）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;idea-插件&#34;&gt;IDEA 插件&lt;/h3&gt;
&lt;p&gt;综合实用性、易用性、流行度、维护频率，精选了以下插件，简单分类为天地二品。&lt;/p&gt;
&lt;h4 id=&#34;精选地品插件&#34;&gt;精选地品插件&lt;/h4&gt;
&lt;p&gt;简单好用、增强功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Background Image Plus +&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：给编辑器设置背景图片（小姐姐图片）&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/11247-background-image-plus-&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chinese Language Pack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：中文支持&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack&amp;mdash;-&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Translation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8579-translation/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key Promoter X&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9792-key-promoter-x/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rainbow Brackets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CodeGlance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7275-codeglance/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WakaTime&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：代码统计和跟踪插件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7425-wakatime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Statistic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：代码统计&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/4509-statistic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;精选天品插件&#34;&gt;精选天品插件&lt;/h4&gt;
&lt;p&gt;提高开发效率和代码质量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String Manipulation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：字符串快捷处理&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/2162-string-manipulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tabnine AI Code Completion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php&amp;ndash;more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GsonFormatPlus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：根据 json 生成对象&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/14949-gsonformatplus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JUnitGenerator V2.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：自动生成单元测试&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RestfulTool&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：辅助 web 开发的工具集&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/14280-restfultool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SequenceDiagram&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：自动生成方法调用时序图&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8286-sequencediagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CheckStyle-IDEA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：自动检查 Java 代码规范&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/1065-checkstyle-idea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alibaba Java Coding Guidelines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：代码规范检查插件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SonarLint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：帮助你发现和修复代码的错误和漏洞&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7973-sonarlint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MybatisX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10119-mybatisx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;美化类&#34;&gt;美化类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extra Icons&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：图标美化插件，支持更多文件类型&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/11058-extra-icons&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chinese Language Pack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：中文支持&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack&amp;mdash;-&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grep Console&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：自定义设置控制台输出颜色&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/idea/plugin/7125-grep-console&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Material Theme UI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：美观的主题&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8006-material-theme-ui&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nyan Progress Bar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：进度条美化&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;activate-power-mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：打字特效&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8330-activate-power-mode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Power Mode II&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：打字特效插件升级版&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8251-power-mode-ii&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rainbow Brackets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Background Image Plus +&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：给编辑器设置背景图片&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/11247-background-image-plus-&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码生成类&#34;&gt;代码生成类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Codota AI Autocomplete for Java and JavaScript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tabnine AI Code Completion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：使用 AI 来自动提示和补全代码，比 IDEA 自带的代码补全更加智能化&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php&amp;ndash;more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UUID Generator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：生成随机的 UUID&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8320-uuid-generator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Randomness&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：生成随机值&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9836-randomness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.ignore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：生成不同语言的版本控制忽略文件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7495&amp;ndash;ignore&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto filling Java call arguments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：通过快捷键自动补全函数的调用参数&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GenerateAllSetter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：快速生成调用对象 setter 方法的代码&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9360-generateallsetter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GenerateSerialVersionUID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：一键为实现 Serializable 接口的类生成 SerialVersionUID&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/185-generateserialversionuid/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GsonFormatPlus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：根据 json 生成对象&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/14949-gsonformatplus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lombok&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;描述：配合 Lombok 依赖及注解使用，能够大大减少 Java 对象的代码量。IDEA 已自带，无需安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官网：https://plugins.jetbrains.com/plugin/6317-lombok/&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy Code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：根据数据库表生成 Java entity、dao、mapper、service、controller 等代码&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10954-easy-code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy Javadoc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：快速生成 Javadoc 文档&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/12977-easy-javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaDoc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：生成 Javadoc 文档&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7157-javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Json2Pojo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：根据 JSON 生成 POJO，根据 POJO 生成 JSON&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8533-json2pojo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JUnitGenerator V2.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：自动生成单元测试&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jindent - Source Code Formatter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：根据自定义模板来生成 javadoc 注释&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8309-jindent&amp;ndash;source-code-formatter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MybatisX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10119-mybatisx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MyBatisCodeHelperPro&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码（收费）&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;功能提效类&#34;&gt;功能提效类&lt;/h4&gt;
&lt;h5 id=&#34;源码阅读&#34;&gt;源码阅读&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Call Graph
&lt;ul&gt;
&lt;li&gt;描述：生成调用关系图，便于查看源码&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/12304-call-graph&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jump to Line
&lt;ul&gt;
&lt;li&gt;描述：支持跳转到任意行进行调试&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/14877-jump-to-line&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SequenceDiagram
&lt;ul&gt;
&lt;li&gt;描述：自动生成方法调用时序图&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8286-sequencediagram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jclasslib Bytecode Viewer
&lt;ul&gt;
&lt;li&gt;描述：字节码查看器&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BrowseWordAtCaret
&lt;ul&gt;
&lt;li&gt;描述： 快速在相同单词间进行跳转&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/201-browsewordatcaret&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CodeGlance
&lt;ul&gt;
&lt;li&gt;描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7275-codeglance/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;代码规范&#34;&gt;代码规范&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CheckStyle-IDEA
&lt;ul&gt;
&lt;li&gt;描述：自动检查 Java 代码规范&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/1065-checkstyle-idea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alibaba Java Coding Guidelines
&lt;ul&gt;
&lt;li&gt;描述：代码规范检查插件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SonarLint
&lt;ul&gt;
&lt;li&gt;描述：帮助你发现和修复代码的错误和漏洞&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7973-sonarlint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FindBugs-IDEA
&lt;ul&gt;
&lt;li&gt;描述：帮你找出代码中潜藏的 Bug&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/3847-findbugs-idea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MetricsReloaded
&lt;ul&gt;
&lt;li&gt;描述：代码复杂度分析&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/93?pr=idea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;格式处理&#34;&gt;格式处理&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CamelCase&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：快速字符串格式转换工具，如驼峰式&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7160-camelcase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Json Parser&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：验证和格式化 Json 字符串的工具&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10650-json-parser&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Properties to YAML Converter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：把 Properties 文件的格式转为 YAML 格式&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String Manipulation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：字符串快捷处理&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/2162-string-manipulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;代码统计&#34;&gt;代码统计&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;WakaTime
&lt;ul&gt;
&lt;li&gt;描述：代码统计和跟踪插件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7425-wakatime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Statistic
&lt;ul&gt;
&lt;li&gt;描述：代码统计&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/4509-statistic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;代码检索&#34;&gt;代码检索&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;OnlineSearch
&lt;ul&gt;
&lt;li&gt;描述：选择文本后支持不同搜索引擎进行搜索&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8298-onlinesearch/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CodeSearch
&lt;ul&gt;
&lt;li&gt;描述：快捷地打开搜索引擎进行搜索&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/12578-codesearch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;其他-1&#34;&gt;其他&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leetcode Editor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：在 IDEA 里刷算法题&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/12132-leetcode-editor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File Watchers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：监听文件，当其发生变化时自动执行命令&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7177-file-watchers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PlantUML integration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：UML 建模工具，只需简单的代码就能画出复杂的 UML 类图&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7017-plantuml-integration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bytecode Editor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：字节码编辑工具&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8461-bytecode-editor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alibaba Cloud Toolkit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：阿里云工具集&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tencent Cloud Toolkit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：腾讯云工具集&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EduTools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：面向教育者，允许创建、分享和加入练习&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10081-edutools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDE Features Trainer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：IntelliJ IDEA 官方出的学习辅助插件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8554-ide-features-trainer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JRebel Plugin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：项目热更新，提高效率（可惜要收费）&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key Promoter X&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9792-key-promoter-x/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Translation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8579-translation/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;idea_seat&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：自动提醒，防止你久坐不动&lt;/li&gt;
&lt;li&gt;官网：https://github.com/s-unscrupulous/idea_seat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RestfulTool&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：辅助 web 开发的工具集&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/14280-restfultool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multirun&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;描述：同时启动多应用&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7248-multirun&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;扩展增强类&#34;&gt;扩展增强类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Free Mybatis Plugin
&lt;ul&gt;
&lt;li&gt;描述：MyBatis 增强插件，支持 mapper =&amp;gt; xml 的跳转、代码生成等功能&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MyBatis Log Plugin
&lt;ul&gt;
&lt;li&gt;描述：MyBatis SQL 提取和格式化输出&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maven Helper
&lt;ul&gt;
&lt;li&gt;描述：Maven 辅助插件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7179-maven-helper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gradle View
&lt;ul&gt;
&lt;li&gt;描述：Gradle 项目管理工具的扩展&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7150-gradle-view&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arthas Idea
&lt;ul&gt;
&lt;li&gt;描述： Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/13581-arthas-idea/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GitToolBox
&lt;ul&gt;
&lt;li&gt;描述： Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7499-gittoolbox/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BashSupport
&lt;ul&gt;
&lt;li&gt;描述：支持 Bash 脚本文件的高亮和提示等&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/4230-bashsupport&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Git Flow Integration
&lt;ul&gt;
&lt;li&gt;描述：Git Flow 的图形界面操作&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7315-git-flow-integration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gitee
&lt;ul&gt;
&lt;li&gt;描述：开源中国的码云插件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8383-gitee&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Drools
&lt;ul&gt;
&lt;li&gt;描述：规则引擎的扩展&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/16871-drools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EnvFile
&lt;ul&gt;
&lt;li&gt;描述：对多环境配置文件的支持&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7861-envfile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes
&lt;ul&gt;
&lt;li&gt;描述：容器管理的扩展&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10485-kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vue.js
&lt;ul&gt;
&lt;li&gt;描述：Vue.js 前端框架的扩展&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9442-vue-js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scala
&lt;ul&gt;
&lt;li&gt;描述：Scala 语言的扩展&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/1347-scala&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Zookeeper
&lt;ul&gt;
&lt;li&gt;描述：Zookeeper 中间件的扩展&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/7364-zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jms messenger
&lt;ul&gt;
&lt;li&gt;描述：对 Java 消息服务的扩展&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10949-jms-messenger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MapStruct Support
&lt;ul&gt;
&lt;li&gt;描述：对 MapStruct 对象转换的支持&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10036-mapstruct-support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big Data Tools
&lt;ul&gt;
&lt;li&gt;描述：提供了 HDFS 等大数据框架的工具集&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/12494-big-data-tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSV
&lt;ul&gt;
&lt;li&gt;描述：支持 CSV 文件的高亮和提示等&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/10037-csv&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ideolog
&lt;ul&gt;
&lt;li&gt;描述：识别和格式化 log 日志文件&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9746-ideolog&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Toml
&lt;ul&gt;
&lt;li&gt;描述：支持 toml 文件的高亮和提示等&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/8195-toml&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.env files support
&lt;ul&gt;
&lt;li&gt;描述：支持 .env 文件的高亮和提示等&lt;/li&gt;
&lt;li&gt;官网：https://plugins.jetbrains.com/plugin/9525&amp;ndash;env-files-support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用软件&#34;&gt;常用软件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;以下部分软件可在【公众号：程序员鱼皮】回复【软件】获取~&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;开发相关&#34;&gt;开发相关&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;JetBrains IDEA：Java 集成开发环境，凭学生邮箱可申请免费使用（https://www.jetbrains.com/idea/）&lt;/li&gt;
&lt;li&gt;Reset Jetbrains：你懂的&lt;/li&gt;
&lt;li&gt;Visual Studio Code：插件化代码编辑器（https://code.visualstudio.com/）&lt;/li&gt;
&lt;li&gt;Sublime Text：轻量代码编辑器（https://www.sublimetext.com/）&lt;/li&gt;
&lt;li&gt;Navicat：数据库管理软件（https://www.navicat.com.cn/）&lt;/li&gt;
&lt;li&gt;JMeter：Java 性能测试工具（https://jmeter.apache.org/）&lt;/li&gt;
&lt;li&gt;JVisual VM：Java 运行状态可视化工具（https://visualvm.github.io/）&lt;/li&gt;
&lt;li&gt;XShell：SSH 连接软件（https://www.netsarang.com/zh/xshell/）&lt;/li&gt;
&lt;li&gt;XFtp：FTP 连接软件（https://www.netsarang.com/zh/xftp/）&lt;/li&gt;
&lt;li&gt;Redis Desktop Manager：Redis 可视化管理工具（https://github.com/uglide/RedisDesktopManager）&lt;/li&gt;
&lt;li&gt;Postman：接口测试工具（https://www.postman.com/）&lt;/li&gt;
&lt;li&gt;VMware：虚拟机软件（https://www.vmware.com/）&lt;/li&gt;
&lt;li&gt;Chocolatey：Windows 软件包管理器（https://chocolatey.org/）&lt;/li&gt;
&lt;li&gt;Typora：写文档软件（https://typora.io/）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;效率&#34;&gt;效率&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Ditto：强大的剪切板（https://ditto-cp.sourceforge.io/）&lt;/li&gt;
&lt;li&gt;uTools：插件化的效率工具（https://u.tools/）&lt;/li&gt;
&lt;li&gt;XMind：思维导图软件（https://www.xmind.cn/）&lt;/li&gt;
&lt;li&gt;Qdir：Windows 多窗口管理器（https://q-dir.en.softonic.com/）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;项目源码50-套&#34;&gt;项目源码（50 套）&lt;/h3&gt;
&lt;h4 id=&#34;电商秒杀&#34;&gt;电商秒杀&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;天猫整站 J2EE：https://how2j.cn/module/115.htm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;天猫整站 SSM：https://how2j.cn/module/134.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;天猫整站 Springboot：https://how2j.cn/module/156.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mall-learning：https://github.com/macrozheng/mall-learningmall（学习教程，架构、业务、技术要点全方位解析）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot 电商商城系统 Mall4j：https://github.com/gz-yami/mall4j&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringBoot 完整电商系统 Mall：https://github.com/macrozheng/mall（包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;newbee-mall：https://github.com/newbee-ltd/newbee-mall （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;paascloud-master：https://github.com/paascloud/paascloud-master（基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mall-swarm：https://github.com/macrozheng/mall-swarm（一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;onemall：https://github.com/YunaiV/onemall（mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;litemall：https://github.com/linlinjava/litemall（又一个小商城，litemall = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xmall：https://github.com/Exrick/xmall （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;miaosha：https://github.com/qiurunze123/miaosha （秒杀系统设计与实现）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SecKill：https://github.com/hfbin/Seckill（基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;博客论坛&#34;&gt;博客论坛&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/langhsu/mblog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mblog&lt;/a&gt;：开源 Java 博客系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/halo-dev/halo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;halo&lt;/a&gt;：一个优秀的开源博客发布应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Qbian61/forum-java&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;forum-java&lt;/a&gt;：一款用 Java（spring boot） 实现的现代化社区（论坛/问答/BBS/社交网络/博客）系统平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/lenve/vhr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vhr&lt;/a&gt;：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/cloudfavorites/favorites-web&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;favorites-web&lt;/a&gt;:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/codedrinker/community&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;community&lt;/a&gt;：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/yourkevin/NiterForum&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NiterForum&lt;/a&gt;：尼特社区-NiterForum-一个论坛/社区程序。后端Springboot/MyBatis/Maven/MySQL，前端Thymeleaf/Layui。可供初学者，学习、交流使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/lenve/VBlog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;VBlog&lt;/a&gt;：V部落，Vue+SpringBoot实现的多用户博客管理平台!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/damoqiongqiu/NiceFish&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NiceFish&lt;/a&gt;：SpringBoot/SpringCloud 前后端分离项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ZHENFENG13/My-Blog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;My-Blog&lt;/a&gt;： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ZHENFENG13/My-Blog-layui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;My-Blog-layui&lt;/a&gt;：layui 版本的 My-Blog : A simple &amp;amp; beautiful blogging system implemented with spring-boot &amp;amp; layui &amp;amp; thymeleaf &amp;amp; mybatis My Blog 是由  SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java  博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/88250/symphony&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;symphony&lt;/a&gt;：Java 实现的现代化社区&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;管理系统&#34;&gt;管理系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/wxiaoqi/Spring-Cloud-Admin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring-Cloud-Admin&lt;/a&gt;：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tomsun28/bootshiro&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bootshiro&lt;/a&gt;：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/72crm/72crm-java&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;悟空CRM&lt;/a&gt;：基于jfinal+vue+ElementUI的前后端分离CRM系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/elunez/eladmin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EL-ADMIN&lt;/a&gt;：基于 SpringBoot 的后台管理系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gitee.com/log4j/pig&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pig&lt;/a&gt;：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp;amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/wuyouzhuguli/FEBS-Shiro&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FEBS-Shiro&lt;/a&gt;：Spring Boot 2.1.3，Shiro1.4.0 &amp;amp; Layui 2.5.4 权限管理系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Heeexy/SpringBoot-Shiro-Vue&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Boot-Shiro-Vue&lt;/a&gt;：基于Spring Boot-Shiro-Vue 的权限管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ZeroWdd/studentmanager&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;studentmanager&lt;/a&gt;：基于springboot+mybatis学生管理系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jishenghua/jshERP&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jshERP&lt;/a&gt;：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/misterchaos/HotelSystem&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HotelSystem&lt;/a&gt;：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;开发平台&#34;&gt;开发平台&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/2014shijina2014/open-capacity-platform&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;open-capacity-platform&lt;/a&gt;：微服务能力开发平台&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/zhangdaiscott/jeecg-boot&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jeecg-boot&lt;/a&gt;：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant  Design&amp;amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他-2&#34;&gt;其他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mindskip/xzs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;学之思在线考试系统&lt;/a&gt;：一款 java + vue 的前后端分离的考试系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Jackson0714/PassJava-Platform&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PassJava-Platform&lt;/a&gt;：一款面试刷题的 Spring Cloud 开源系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/kekingcn/kkFileView&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kkFileView&lt;/a&gt;：使用spring boot打造文件文档在线预览项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/baomidou/dynamic-datasource-spring-boot-starter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dynamic-datasource&lt;/a&gt;：一个基于springboot的快速集成多数据源的启动器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/373675032/moti-cloud&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;moti-cloud&lt;/a&gt;：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/qiurunze123/threadandjuc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;threadandjuc&lt;/a&gt;：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/proxyee-down-org/proxyee-down&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;proxyee-down&lt;/a&gt;：http下载工具，基于http代理，支持多连接分块下载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sfturing/hosp_order&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hosp_order&lt;/a&gt;：医院预约挂号系统，基于 SSM 框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://how2j.cn/module/170.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;趋势投资 SpringCloud&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://how2j.cn/module/176.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DiyTomcat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阶段-6java-高级&#34;&gt;阶段 6：Java 高级&lt;/h2&gt;
&lt;h3 id=&#34;目标-5&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;不满足于能做，而是通过更 &lt;strong&gt;深入&lt;/strong&gt; 和 &lt;strong&gt;广泛&lt;/strong&gt; 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。&lt;/p&gt;
&lt;p&gt;已经到了这个阶段，建议除了看完成的教程外，平时多自主搜索信息去学习，积少成多。比如遇到了一个不了解的名词，可以去网上搜一下，感兴趣的话再进行下一步的学习。&lt;/p&gt;
&lt;h3 id=&#34;-并发编程21-天&#34;&gt;🌖 并发编程（21 天）&lt;/h3&gt;
&lt;p&gt;对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。&lt;/p&gt;
&lt;p&gt;把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。&lt;/p&gt;
&lt;h4 id=&#34;知识-21&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;线程和进程&lt;/li&gt;
&lt;li&gt;线程状态&lt;/li&gt;
&lt;li&gt;并行和并发&lt;/li&gt;
&lt;li&gt;同步和异步&lt;/li&gt;
&lt;li&gt;Synchronized&lt;/li&gt;
&lt;li&gt;Volatile 关键字&lt;/li&gt;
&lt;li&gt;Lock 锁&lt;/li&gt;
&lt;li&gt;死锁&lt;/li&gt;
&lt;li&gt;可重入锁&lt;/li&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;li&gt;JUC 的使用&lt;/li&gt;
&lt;li&gt;AQS&lt;/li&gt;
&lt;li&gt;Fork Join&lt;/li&gt;
&lt;li&gt;CAS&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-23&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;并发编程入门不难，依然是 &lt;strong&gt;先学会使用&lt;/strong&gt; 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。而不是张口闭口多线程，上天入地高并发。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-16&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;volatile 关键字的作用&lt;/li&gt;
&lt;li&gt;使用线程池有哪些好处？&lt;/li&gt;
&lt;li&gt;线程池参数如何设置？&lt;/li&gt;
&lt;li&gt;什么是线程安全问题，如何解决？&lt;/li&gt;
&lt;li&gt;介绍 synchronized 的锁升级机制&lt;/li&gt;
&lt;li&gt;CopyOnWriteArrayList 适用于哪种场景？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-22&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：https://www.bilibili.com/video/BV1Kw411Z7dF（特点是短、精、新）&lt;/li&gt;
&lt;li&gt;黑马程序员全面深入学习Java并发编程：https://www.bilibili.com/video/BV16J411h7Rd（讲的很细、全面深入）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐《Java并发编程实战》（国外的经典）&lt;/li&gt;
&lt;li&gt;⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⭐ Java 并发知识点总结：https://github.com/CL0610/Java-concurrency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-jvm30-天&#34;&gt;🌖 JVM（30 天）&lt;/h3&gt;
&lt;p&gt;想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。&lt;/p&gt;
&lt;p&gt;了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。&lt;/p&gt;
&lt;p&gt;在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。&lt;/p&gt;
&lt;h4 id=&#34;知识-22&#34;&gt;知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JVM 内存结构&lt;/li&gt;
&lt;li&gt;JVM 生命周期&lt;/li&gt;
&lt;li&gt;主流虚拟机&lt;/li&gt;
&lt;li&gt;Java 代码执行流程&lt;/li&gt;
&lt;li&gt;类加载
&lt;ul&gt;
&lt;li&gt;类加载器&lt;/li&gt;
&lt;li&gt;类加载过程&lt;/li&gt;
&lt;li&gt;双亲委派机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;垃圾回收
&lt;ul&gt;
&lt;li&gt;垃圾回收器&lt;/li&gt;
&lt;li&gt;垃圾回收策略&lt;/li&gt;
&lt;li&gt;垃圾回收算法&lt;/li&gt;
&lt;li&gt;StopTheWorld&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字节码&lt;/li&gt;
&lt;li&gt;内存分配和回收&lt;/li&gt;
&lt;li&gt;JVM 性能调优
&lt;ul&gt;
&lt;li&gt;性能分析方法&lt;/li&gt;
&lt;li&gt;常用工具&lt;/li&gt;
&lt;li&gt;参数设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java 探针&lt;/li&gt;
&lt;li&gt;线上故障分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-24&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。&lt;/p&gt;
&lt;p&gt;第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。&lt;/p&gt;
&lt;p&gt;如果只是为了通过面试可以直接看更精简的视频，比如狂神的。&lt;/p&gt;
&lt;h4 id=&#34;经典面试题-17&#34;&gt;经典面试题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;介绍 JVM 的内存模型？&lt;/li&gt;
&lt;li&gt;JVM 内存为什么要分代？&lt;/li&gt;
&lt;li&gt;介绍一次完整的 GC 流程&lt;/li&gt;
&lt;li&gt;介绍双亲委派模型，为什么需要它？&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;资源-23&#34;&gt;资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;视频
&lt;ul&gt;
&lt;li&gt;⭐ 尚硅谷宋红康 - JVM 全套教程详解：https://www.bilibili.com/video/BV1PJ411n7xZ（讲得相当全面！附有实操）&lt;/li&gt;
&lt;li&gt;【狂神说Java】JVM快速入门篇：https://www.bilibili.com/video/BV1iJ411d7jS（讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书籍
&lt;ul&gt;
&lt;li&gt;⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目
&lt;ul&gt;
&lt;li&gt;⭐ Java 虚拟机底层原理知识总结：https://github.com/doocs/jvm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实战
&lt;ul&gt;
&lt;li&gt;阿里云 JVM 实战：https://developer.aliyun.com/graph/java/point/64&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工具
&lt;ul&gt;
&lt;li&gt;Arthas 开源 Java 诊断工具：https://github.com/alibaba/arthas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构设计&#34;&gt;架构设计&lt;/h3&gt;
&lt;h4 id=&#34;-分布式&#34;&gt;🌖 分布式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;分布式理论
&lt;ul&gt;
&lt;li&gt;CAP&lt;/li&gt;
&lt;li&gt;BASE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式缓存
&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Memcached&lt;/li&gt;
&lt;li&gt;Etcd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一致性算法
&lt;ul&gt;
&lt;li&gt;Raft&lt;/li&gt;
&lt;li&gt;Paxos&lt;/li&gt;
&lt;li&gt;一致性哈希&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式事务
&lt;ul&gt;
&lt;li&gt;解决方案
&lt;ul&gt;
&lt;li&gt;2PC&lt;/li&gt;
&lt;li&gt;3PC&lt;/li&gt;
&lt;li&gt;TCC&lt;/li&gt;
&lt;li&gt;本地消息表&lt;/li&gt;
&lt;li&gt;MQ 事务消息&lt;/li&gt;
&lt;li&gt;最大努力通知&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LCN 分布式事务框架：https://github.com/codingapi/tx-lcn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式 id 生成
&lt;ul&gt;
&lt;li&gt;Leaf 分布式 id 生成服务：https://github.com/Meituan-Dianping/Leaf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式任务调度
&lt;ul&gt;
&lt;li&gt;XXL-JOB 调度平台：https://www.xuxueli.com/xxl-job/&lt;/li&gt;
&lt;li&gt;elastic-job：https://gitee.com/elasticjob/elastic-job&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式服务调用
&lt;ul&gt;
&lt;li&gt;trpc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式存储
&lt;ul&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;li&gt;Ceph&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式数据库
&lt;ul&gt;
&lt;li&gt;TiDB&lt;/li&gt;
&lt;li&gt;OceanBase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式文件系统
&lt;ul&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式协调
&lt;ul&gt;
&lt;li&gt;Zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式监控
&lt;ul&gt;
&lt;li&gt;Prometheus&lt;/li&gt;
&lt;li&gt;Zabbix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式消息队列
&lt;ul&gt;
&lt;li&gt;RabbitMQ&lt;/li&gt;
&lt;li&gt;Kafka&lt;/li&gt;
&lt;li&gt;Apache Pulsar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式日志收集
&lt;ul&gt;
&lt;li&gt;Elastic Stack&lt;/li&gt;
&lt;li&gt;Loki&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式搜索引擎
&lt;ul&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式链路追踪
&lt;ul&gt;
&lt;li&gt;Apache SkyWalking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式配置中心
&lt;ul&gt;
&lt;li&gt;Apollo&lt;/li&gt;
&lt;li&gt;Nacos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;-高可用&#34;&gt;🌗 高可用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;限流&lt;/li&gt;
&lt;li&gt;降级熔断&lt;/li&gt;
&lt;li&gt;冷备&lt;/li&gt;
&lt;li&gt;双机热备&lt;/li&gt;
&lt;li&gt;同城双活&lt;/li&gt;
&lt;li&gt;异地双活&lt;/li&gt;
&lt;li&gt;异地多活&lt;/li&gt;
&lt;li&gt;容灾备份&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;-高并发&#34;&gt;🌗 高并发&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据库
&lt;ul&gt;
&lt;li&gt;分库分表
&lt;ul&gt;
&lt;li&gt;MyCat 中间件&lt;/li&gt;
&lt;li&gt;Apache ShardingSphere 中间件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读写分离&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存
&lt;ul&gt;
&lt;li&gt;缓存雪崩&lt;/li&gt;
&lt;li&gt;缓存击穿&lt;/li&gt;
&lt;li&gt;缓存穿透&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;负载均衡
&lt;ul&gt;
&lt;li&gt;负载均衡算法&lt;/li&gt;
&lt;li&gt;软硬件负载均衡（2、3、4、7 层）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;-服务网格&#34;&gt;🌘 服务网格&lt;/h4&gt;
&lt;p&gt;服务网格用来描述组成应用程序的微服务网络以及它们之间的交互。服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理，常见的需求包括服务发现、负载均衡、故障恢复、度量和监控等。&lt;/p&gt;
&lt;h5 id=&#34;知识-23&#34;&gt;知识&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Istio
&lt;ul&gt;
&lt;li&gt;流量管理&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;li&gt;可观测性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Envoy（开源的边缘和服务代理）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;资源-24&#34;&gt;资源&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;资料大全：https://www.servicemesher.com/awesome-servicemesh/&lt;/li&gt;
&lt;li&gt;istio 官方文档：https://preliminary.istio.io/latest/zh&lt;/li&gt;
&lt;li&gt;istio 视频教程：https://www.bilibili.com/video/BV1Lf4y1x7j8&lt;/li&gt;
&lt;li&gt;在线体验 istio：https://katacoda.com/courses/istio/&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;-ddd-领域驱动设计&#34;&gt;🌘 DDD 领域驱动设计&lt;/h4&gt;
&lt;p&gt;将数据、业务流程抽象成容易理解的领域模型，通过用代码实现领域模型，来组成完整的业务系统。&lt;/p&gt;
&lt;h5 id=&#34;知识-24&#34;&gt;知识&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;DDD 的优势&lt;/li&gt;
&lt;li&gt;DDD 的适用场景&lt;/li&gt;
&lt;li&gt;DDD 核心概念
&lt;ul&gt;
&lt;li&gt;领域模型分类：失血、贫血、充血、涨血&lt;/li&gt;
&lt;li&gt;子域划分：核心域、通用域、支撑域&lt;/li&gt;
&lt;li&gt;限界上下文&lt;/li&gt;
&lt;li&gt;实体和值对象&lt;/li&gt;
&lt;li&gt;聚合设计&lt;/li&gt;
&lt;li&gt;领域事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DDD 实践&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;资源-25&#34;&gt;资源&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;DDD 入门：https://juejin.cn/post/7004002483601145863&lt;/li&gt;
&lt;li&gt;DDD 编码实践：https://juejin.cn/post/6844903903104860174&lt;/li&gt;
&lt;li&gt;DDD 实践教程：https://www.bilibili.com/video/BV1Y341167Xp&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;-其他&#34;&gt;🌘 其他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Sidecar&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;li&gt;云原生&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;学习建议-25&#34;&gt;学习建议&lt;/h4&gt;
&lt;p&gt;架构设计的学习没有顶点，多看文章，思考每种设计的优缺点和适用场景，有机会的话在企业中实践即可。&lt;/p&gt;
&lt;p&gt;还在学校、或者初入这行的同学切记，千万不要一味地去背诵架构设计的八股文。你可以背，但是这一块的知识只有结合具体的项目才有意义，所以要多做项目去实践设计的合理性，而不是什么设计都咔咔往系统里去怼。比如面试问到分布式事务，能结合自己项目中用分布式事务解决问题的经验去回答最好。&lt;/p&gt;
&lt;h3 id=&#34;-其他技术&#34;&gt;🌘 其他技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;热数据探测技术：京东 HotKey&lt;/li&gt;
&lt;li&gt;数据库流水订阅：阿里 Canal&lt;/li&gt;
&lt;li&gt;监控告警&lt;/li&gt;
&lt;li&gt;应用安全&lt;/li&gt;
&lt;li&gt;故障演练&lt;/li&gt;
&lt;li&gt;流量回放&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阶段-7java-求职&#34;&gt;阶段 7：Java 求职&lt;/h2&gt;
&lt;h3 id=&#34;目标-6&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;找到好工作&lt;/p&gt;
&lt;h3 id=&#34;建议&#34;&gt;建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求&lt;/li&gt;
&lt;li&gt;雕琢一份优秀的简历，推荐阅读：https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA&lt;/li&gt;
&lt;li&gt;多读面经，坚持刷算法&lt;/li&gt;
&lt;li&gt;多参与面试，持续复盘总结&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;资源-26&#34;&gt;资源&lt;/h3&gt;
&lt;h4 id=&#34;校招岗位&#34;&gt;校招岗位&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 牛客求职校招版：https://www.nowcoder.com/recommend/campus&lt;/li&gt;
&lt;li&gt;阿里 Java 开发：https://campus.alibaba.com/position.htm?refno=12699&lt;/li&gt;
&lt;li&gt;腾讯后台开发：https://join.qq.com/post_detail.html?pid=1&amp;amp;id=101&amp;amp;tid=2&lt;/li&gt;
&lt;li&gt;腾讯全栈开发：https://join.qq.com/post_detail.html?pid=1&amp;amp;id=137&amp;amp;tid=2&lt;/li&gt;
&lt;li&gt;腾讯运营开发：https://join.qq.com/post_detail.html?pid=1&amp;amp;id=105&amp;amp;tid=2&lt;/li&gt;
&lt;li&gt;美团后端开发：https://campus.meituan.com/jobs?jobFamily=1&amp;amp;jobId=4005&amp;amp;jobType=1&amp;amp;pageNo=2&lt;/li&gt;
&lt;li&gt;华为软件开发：https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;社招岗位&#34;&gt;社招岗位&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 牛客求职社招版：https://www.nowcoder.com/recommend/fulltime&lt;/li&gt;
&lt;li&gt;阿里社招：https://job.alibaba.com/zhaopin/positionList.htm&lt;/li&gt;
&lt;li&gt;腾讯社招：https://careers.tencent.com/search.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实习&#34;&gt;实习&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 牛客实习广场：https://nowpick.nowcoder.com/w/intern/center&lt;/li&gt;
&lt;li&gt;实习僧：https://www.shixiseng.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内推&#34;&gt;内推&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;牛客内推：https://www.nowcoder.com/discuss/referral/index&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;鱼皮经历&#34;&gt;鱼皮经历&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;从 0 开始的编程学习进大厂经历
&lt;ul&gt;
&lt;li&gt;⭐ 我学计算机的四年，共勉：https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实习经历
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⭐ 我的第一份实习：https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 我的第二份实习，字节跳动：https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;知识总结&#34;&gt;知识总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 牛客 Java 面试宝典：https://www.nowcoder.com/tutorial/94&lt;/li&gt;
&lt;li&gt;⭐ JavaGuide：https://snailclimb.gitee.io/javaguide/#/&lt;/li&gt;
&lt;li&gt;⭐ CS-Notes：http://www.cyc2018.xyz/&lt;/li&gt;
&lt;li&gt;阿里 Java 技术图谱：https://developer.aliyun.com/graph/java&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面经&#34;&gt;面经&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⭐ 牛客面经：https://www.nowcoder.com/discuss/experience?tagId=639&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;秋招总结&amp;amp;Java心得（双非硕士，已拿11+5家Offer）：https://www.nowcoder.com/discuss/327041&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;被疫情逼得gap year的完全菜鸡的春招之路。：https://www.nowcoder.com/discuss/427812&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;谨以此文纪念2019年春招：https://www.nowcoder.com/discuss/181212&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2019秋招经验谈：https://www.nowcoder.com/discuss/122463&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;秋招心得：https://www.nowcoder.com/discuss/317888&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非科班本科菜鸡投的337家(Java后台)：https://www.nowcoder.com/discuss/133333&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018 这一年：https://www.nowcoder.com/discuss/137593&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双非的秋招，感谢牛客：https://www.nowcoder.com/discuss/142181&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二本本科Java上岸(滴滴京东58)2019秋招心得+面经：https://www.nowcoder.com/discuss/333912&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;碎碎念流水账特别长 of 自己的 Java 秋招：https://www.nowcoder.com/discuss/354154&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;秋招之路：个人历程以及面经总结：https://www.nowcoder.com/discuss/344311&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【秋招面经总结】菜逼的坎坷之路（JAVA后台研发）：https://www.nowcoder.com/discuss/352030&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阿里11面+EMC+网易+美团面经：https://www.nowcoder.com/discuss/105302&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018秋招阿里巴巴java笔试试题：https://www.nowcoder.com/discuss/67379&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我的秋招经验分享（已拿BAT头条网易）：https://www.nowcoder.com/discuss/117071&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20届的阿里 头条 网易  滴滴 百度 小米等Java面经：https://www.nowcoder.com/discuss/68289&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拿了5个offer，回馈牛友发一波面经（长文详细）：https://www.nowcoder.com/discuss/79051&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【总结】零基础学习一年拿到BAT三家offer：https://www.nowcoder.com/discuss/188241&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本科生秋招经验总结帖：https://www.nowcoder.com/discuss/296586&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双非渣硕校招总结+Java面经（网易阿里百度等）：https://www.nowcoder.com/discuss/134850&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2018秋招笔试科大讯飞java笔试试题：https://www.nowcoder.com/discuss/67684&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;头条后台研发面经（共三面）：https://www.nowcoder.com/discuss/94233&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一点点小经验和几家Java面经：https://www.nowcoder.com/discuss/138434&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;感谢牛客网！发一波面经！阿里、网易游戏、京东等offer。：https://www.nowcoder.com/discuss/101712&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非科班水硕的春招实习总结- Java 后台开发：https://www.nowcoder.com/discuss/186528&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十面阿里，七面头条，六个Offer，春招结束：https://www.nowcoder.com/discuss/80156&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成功上岸，最后一波回馈：https://www.nowcoder.com/discuss/176434&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【Java后台开发面经】阿里|网易|头条|腾讯|华为：https://www.nowcoder.com/discuss/108655&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三跨学生的面经（头条、拼多多、华为、vivo）：https://www.nowcoder.com/discuss/195640&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面试题解&#34;&gt;面试题解&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;⭐ 2021 最新 Java 笔试、面试题合集：https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ（密码：lkw1）&lt;/li&gt;
&lt;li&gt;牛客网 Java开发校招面试考点汇总（附面试题和答案）：https://www.nowcoder.com/discuss/161991&lt;/li&gt;
&lt;li&gt;50w字+的技术类校招面试题汇总（附答案+考点）：https://www.nowcoder.com/discuss/164726&lt;/li&gt;
&lt;li&gt;硬件，软件（后端开发，算法，数据分析等）历年企业笔试真题汇总：https://www.nowcoder.com/discuss/212783&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;视频&#34;&gt;视频&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：https://www.bilibili.com/video/BV1Hy4y1B78T&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：https://www.bilibili.com/video/BV1yU4y1J7Bb&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阶段-8持续学习&#34;&gt;阶段 8：持续学习&lt;/h2&gt;
&lt;h3 id=&#34;目标-7&#34;&gt;目标&lt;/h3&gt;
&lt;p&gt;持续追求技术的深度和广度，培养自己的 &lt;strong&gt;核心竞争力&lt;/strong&gt; 和 &lt;strong&gt;不可替代性&lt;/strong&gt; ，学无止境！&lt;/p&gt;
&lt;h3 id=&#34;学习建议-26&#34;&gt;学习建议&lt;/h3&gt;
&lt;p&gt;自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。&lt;/p&gt;
&lt;h3 id=&#34;学习方向&#34;&gt;学习方向&lt;/h3&gt;
&lt;h4 id=&#34;框架源码&#34;&gt;框架源码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Spring&lt;/li&gt;
&lt;li&gt;SpringBoot&lt;/li&gt;
&lt;li&gt;SpringMVC&lt;/li&gt;
&lt;li&gt;MyBatis&lt;/li&gt;
&lt;li&gt;Netty&lt;/li&gt;
&lt;li&gt;Dubbo&lt;/li&gt;
&lt;li&gt;SpringCloud&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;计算机原理&#34;&gt;计算机原理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;《算法导论》：https://www.bilibili.com/video/av48922404&lt;/li&gt;
&lt;li&gt;《现代操作系统》：https://www.bilibili.com/video/av9555596&lt;/li&gt;
&lt;li&gt;《深入理解计算机系统》：https://www.bilibili.com/video/av31289365&lt;/li&gt;
&lt;li&gt;《编译原理》： &lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/av17649289&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bilibili.com/video/av17649289&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《计算机网络：自顶向下方法》：https://www.bilibili.com/video/BV1JV411t7ow&lt;/li&gt;
&lt;li&gt;《计算机程序的构造和解释》：https://www.bilibili.com/video/av8515129&lt;/li&gt;
&lt;li&gt;《数据库系统概论》：https://www.bilibili.com/video/BV1G54y1d7ZK&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数据库--中间件--分布式&#34;&gt;数据库 / 中间件 / 分布式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据库
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存
&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列
&lt;ul&gt;
&lt;li&gt;Apache Kafka&lt;/li&gt;
&lt;li&gt;Apache Pulsar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;搜索引擎
&lt;ul&gt;
&lt;li&gt;Elastic Stack
&lt;ul&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;logstash&lt;/li&gt;
&lt;li&gt;kibana&lt;/li&gt;
&lt;li&gt;beats&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容器
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;K8S&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解决方案&#34;&gt;解决方案&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;广告系统&lt;/li&gt;
&lt;li&gt;电商系统&lt;/li&gt;
&lt;li&gt;搜索系统&lt;/li&gt;
&lt;li&gt;支付转账&lt;/li&gt;
&lt;li&gt;游戏后台&lt;/li&gt;
&lt;li&gt;即时通讯&lt;/li&gt;
&lt;li&gt;社交系统&lt;/li&gt;
&lt;li&gt;CMS 系统&lt;/li&gt;
&lt;li&gt;ERP 系统&lt;/li&gt;
&lt;li&gt;OA 系统&lt;/li&gt;
&lt;li&gt;代码生成&lt;/li&gt;
&lt;li&gt;权限管理&lt;/li&gt;
&lt;li&gt;秒杀活动&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;架构设计-1&#34;&gt;架构设计&lt;/h4&gt;
&lt;p&gt;同阶段 6 架构设计部分&lt;/p&gt;
&lt;h4 id=&#34;大数据&#34;&gt;大数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;5V 特点&lt;/li&gt;
&lt;li&gt;Hadoop&lt;/li&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;li&gt;MapReduce&lt;/li&gt;
&lt;li&gt;Spark&lt;/li&gt;
&lt;li&gt;Flink&lt;/li&gt;
&lt;li&gt;Storm&lt;/li&gt;
&lt;li&gt;Hive&lt;/li&gt;
&lt;li&gt;HBase&lt;/li&gt;
&lt;li&gt;Druid&lt;/li&gt;
&lt;li&gt;Kylin&lt;/li&gt;
&lt;li&gt;Pig&lt;/li&gt;
&lt;li&gt;Mahout&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;前沿技术&#34;&gt;前沿技术&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;云原生：https://www.jianshu.com/p/a37baa7c3eff
&lt;ul&gt;
&lt;li&gt;Quasar Framework：http://www.quasarchs.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务网格：https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh
&lt;ul&gt;
&lt;li&gt;istio：https://github.com/istio/istio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GraalVM：https://juejin.cn/post/6850418120570437646（高性能的通用虚拟机）
&lt;ul&gt;
&lt;li&gt;官网：https://www.graalvm.org/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ZGC：https://juejin.cn/post/6859276583656980493（新一代垃圾回收器）
&lt;ul&gt;
&lt;li&gt;官网：http://openjdk.java.net/projects/zgc/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自学-java-专题资源&#34;&gt;自学 Java 专题资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;⭐ GitHub Java 专区：https://github.com/topics/java&lt;/li&gt;
&lt;li&gt;⭐ GitHub Java 合集：https://github.com/akullpp/awesome-java&lt;/li&gt;
&lt;li&gt;StackOverflow：https://stackoverflow.com/questions/tagged/java（解决问题必备）&lt;/li&gt;
&lt;li&gt;⭐ 掘金 Java 专区：https://juejin.cn/tag/Java&lt;/li&gt;
&lt;li&gt;美团技术团队：https://tech.meituan.com/&lt;/li&gt;
&lt;li&gt;阿里技术团队：https://102.alibaba.com/tech/list/&lt;/li&gt;
&lt;li&gt;有赞技术团队：https://tech.youzan.com/tag/back-end/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;h3 id=&#34;程序员重要能力&#34;&gt;程序员重要能力&lt;/h3&gt;
&lt;p&gt;想成为大佬，就是要通过学习和积累，提升自己的各方面能力，比较抽象，共勉！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;团队协作能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高效沟通能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求分析能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;架构设计能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象复用能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;独立创造能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题解决能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归纳总结能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自主学习能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工具利用能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高效编码能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息检索能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开源建设能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源码阅读能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自测审查能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档编写能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;知识表达能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绘图描述能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兴趣驱动（长期学习能力）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持好奇心&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他（狗头）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;复制粘贴能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打架能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PPT 制作能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;编程误区&#34;&gt;编程误区&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己）&lt;/li&gt;
&lt;li&gt;忽视基础，急于求成 ❌（勿以浮沙筑高台）&lt;/li&gt;
&lt;li&gt;数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升）&lt;/li&gt;
&lt;li&gt;编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行）&lt;/li&gt;
&lt;li&gt;每行代码都要追求完美 ❌（何为完美？每个人的定义不同）&lt;/li&gt;
&lt;li&gt;用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹）&lt;/li&gt;
&lt;li&gt;我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长）&lt;/li&gt;
&lt;li&gt;跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 &amp;gt; 2，切勿闭门造车，不过也要找到合适的同学去交流）&lt;/li&gt;
&lt;li&gt;做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？）&lt;/li&gt;
&lt;li&gt;遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长）&lt;/li&gt;
&lt;li&gt;遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》）&lt;/li&gt;
&lt;li&gt;花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵）&lt;/li&gt;
&lt;li&gt;只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的）&lt;/li&gt;
&lt;li&gt;单元测试不重要 ❌（一棍打死）&lt;/li&gt;
&lt;li&gt;写文档不重要 ❌（一棍打死）&lt;/li&gt;
&lt;li&gt;和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野）&lt;/li&gt;
&lt;li&gt;收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？）&lt;/li&gt;
&lt;li&gt;不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;高效法则&#34;&gt;高效法则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不要过分追求完美，完成比完美更重要。&lt;/li&gt;
&lt;li&gt;有现成的代码，就不要自己写，避免重复劳动（学习除外）。&lt;/li&gt;
&lt;li&gt;学会使用软件及快捷键来提升自己的编码效率。&lt;/li&gt;
&lt;li&gt;做项目前，要先想清楚怎么做，做好充分的预研和设计。这样不仅便于后续的程序扩展，也能避免无意义的返工。&lt;/li&gt;
&lt;li&gt;将大的目标进行拆解，做好计划，分清主次。不要因为觉得目标遥不可及而拖延，也不要盲目乐观而松懈。&lt;/li&gt;
&lt;li&gt;养成好的作息习惯，找到自己适合工作的黄金时间。&lt;/li&gt;
&lt;li&gt;记性不好，就多记录、多总结、定期复习。哪怕实在记不住，也可以借助文档、收藏夹软件来当自己的第二大脑。&lt;/li&gt;
&lt;li&gt;积累属于自己的工具库，配合搜索软件实现随用随取。&lt;/li&gt;
&lt;li&gt;多和其他同行交流或订阅技术推送，拓宽知识渠道，从而了解更多的工具和方法。有些东西你只要听说过，要用时也许就能节省大量查找时间。&lt;/li&gt;
&lt;li&gt;找到让自己进入专注做事的状态的方法，比如戴上耳机、嚼口香糖等。&lt;/li&gt;
&lt;li&gt;做事高效，离不开经验的积累，因此要多写代码、多做项目。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常见问题&#34;&gt;常见问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按照这份路线学习，每天要学多少个小时，总共要学多久？&lt;/p&gt;
&lt;p&gt;回答：每个人学习能力不同，当然没有固定标准。我当时平均每天可以学习 6 个小时，寒暑假能保证 8 小时以上的学习，路线中的时长是我当时学习时长 * 1.5 倍的参考值。实话说，我的学习效率真的不高，对编程感兴趣，多学就好了。与其纠结这个时长，倒不妨多抽点时间，每天多学一点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这份路线上推荐的资源，鱼皮都看完了么？&lt;/p&gt;
&lt;p&gt;回答：我是特么神仙啊？怎么可能都看完了！这份路线的本质是以网上现有的、死板的 Java 大学习框架为基础，结合我自己实际学习的知识、经验和感悟给它注入灵魂，从而希望给大家带来更大的帮助和价值。路线中的资源都是利用我自己的资源检索能力和渠道，通过试看、反复对比和参考评价精选出来的，不是主观臆断、空穴来风。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我学到这份路线的哪个位置，可以找工作？&lt;/p&gt;
&lt;p&gt;回答：这和你自己的领悟能力和教育背景有关。夸张点说，有些清华大学的同学，可能之前都没学过 Java，照样能找到大厂 Java 开发工作。学到同一阶段的同学，学习过程中的认真程度、积累总结数、做项目个数、基础学习的好坏不同，找到的工作肯定也不同。但一般情况下，想要进大厂，建议至少学完阶段 4 的微服务部分，然后去做一个完整的项目，用上之前学习的技术；不想进大厂的同学，学完第 3 阶段后，学下缓存和队列，一般也能找到 Java 开发的工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学完这份路线就能进大厂么？&lt;/p&gt;
&lt;p&gt;回答：你先学完，再问这个问题。没有绝对进大厂的保证，但是相信我，把这份路线上的大部分知识学了，再做做项目，哪怕进不了大厂，你拿到的薪水也绝对比松散学习的同学高！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我可以相信你么？&lt;/p&gt;
&lt;p&gt;回答：不要相信我，应该相信你自己。想进大厂，就不要怀疑自己的能力！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;觉得看文字累的朋友，欢迎看下视频版，带大家导读一下：https://www.bilibili.com/video/BV1Qf4y1K7ff/&lt;/p&gt;
&lt;p&gt;以上就是鱼皮熬了几天大夜、结合个人经验、并且参考了大量网上的文章和评论总结而成的学习路线，真的是非常不容易，如果大家觉得满意请务必 &lt;strong&gt;三连&lt;/strong&gt; 支持下。&lt;/p&gt;
&lt;p&gt;我是鱼皮，持续分享编程干货的程序员，欢迎关注，下期再见~&lt;/p&gt;
</description>
        </item>
        <item>
        <title>前端学习路线</title>
        <link>https://damaicao.github.io/post/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
        <pubDate>Wed, 01 Dec 2021 01:23:09 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
        <description>&lt;h1 id=&#34;前端学习路线&#34;&gt;前端学习路线&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这份学习路线并不完美，也不会有最终形态，正如前端不可预见、永无止境的未来。[by 程序员鱼皮](&lt;a class=&#34;link&#34; href=&#34;https://github.com/liyupi/code-roadmap&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;liyupi/code-roadmap: 编程学习路线 (github.com)&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;💂 + 💻 = 👴🏽&lt;/p&gt;
&lt;h2 id=&#34;大纲&#34;&gt;大纲&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;前言 - 学编程需要的特质&lt;/li&gt;
&lt;li&gt;前端学习七阶段
&lt;ol&gt;
&lt;li&gt;前端入门&lt;/li&gt;
&lt;li&gt;巩固基础&lt;/li&gt;
&lt;li&gt;前端工程化&lt;/li&gt;
&lt;li&gt;前端优化&lt;/li&gt;
&lt;li&gt;前端生态&lt;/li&gt;
&lt;li&gt;前端求职&lt;/li&gt;
&lt;li&gt;前端未来&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;尾声 - 持续学习&lt;/li&gt;
&lt;li&gt;我的前端学习路线&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;前言---学编程需要的特质&#34;&gt;前言 - 学编程需要的特质&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;相信自己有能力，那么你就真的会有！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兴趣&lt;/li&gt;
&lt;li&gt;坚持&lt;/li&gt;
&lt;li&gt;付出&lt;/li&gt;
&lt;li&gt;心态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一前端入门&#34;&gt;一、前端入门&lt;/h2&gt;
&lt;h3 id=&#34;开发工具&#34;&gt;开发工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VSCode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WebStorm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sublime Text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HBuilder X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记事本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线 IDE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;html&#34;&gt;HTML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本语法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;css&#34;&gt;CSS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;盒子模型&lt;/li&gt;
&lt;li&gt;内联元素/块状元素&lt;/li&gt;
&lt;li&gt;文档流&lt;/li&gt;
&lt;li&gt;浮动 float&lt;/li&gt;
&lt;li&gt;元素堆叠&lt;/li&gt;
&lt;li&gt;块格式化上下文(BFC)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应式布局&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Flex 布局&lt;/li&gt;
&lt;li&gt;Grid 布局&lt;/li&gt;
&lt;li&gt;CSS 动画&lt;/li&gt;
&lt;li&gt;瀑布流&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本语法&lt;/li&gt;
&lt;li&gt;基本类型&lt;/li&gt;
&lt;li&gt;Javascript 对象&lt;/li&gt;
&lt;li&gt;原型和继承&lt;/li&gt;
&lt;li&gt;作用域&lt;/li&gt;
&lt;li&gt;闭包&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;li&gt;ES6+&lt;/li&gt;
&lt;li&gt;单线程与异步 Javascript&lt;/li&gt;
&lt;li&gt;DOM/BOM API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二巩固基础&#34;&gt;二、巩固基础&lt;/h2&gt;
&lt;h3 id=&#34;前端基础知识&#34;&gt;前端基础知识&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;互联网&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器 DOM 事件流/事件委托&lt;/li&gt;
&lt;li&gt;浏览器加载顺序&lt;/li&gt;
&lt;li&gt;浏览器渲染过程&lt;/li&gt;
&lt;li&gt;浏览器 EventLoop&lt;/li&gt;
&lt;li&gt;浏览器同源策略&lt;/li&gt;
&lt;li&gt;跨域方案/CORS&lt;/li&gt;
&lt;li&gt;浏览器缓存&lt;/li&gt;
&lt;li&gt;常见调试技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 请求过程&lt;/li&gt;
&lt;li&gt;常见 HTTP 协议&lt;/li&gt;
&lt;li&gt;HTTP 1.0/HTTP 1.1/HTTP2/HTTP3&lt;/li&gt;
&lt;li&gt;Ajax&lt;/li&gt;
&lt;li&gt;WebSocket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;计算机基础&#34;&gt;计算机基础&lt;/h3&gt;
&lt;h4 id=&#34;算法和数据结构&#34;&gt;算法和数据结构&lt;/h4&gt;
&lt;h4 id=&#34;计算机网络&#34;&gt;计算机网络&lt;/h4&gt;
&lt;h4 id=&#34;操作系统&#34;&gt;操作系统&lt;/h4&gt;
&lt;h3 id=&#34;软件开发基础&#34;&gt;软件开发基础&lt;/h3&gt;
&lt;h4 id=&#34;设计模式&#34;&gt;设计模式&lt;/h4&gt;
&lt;h4 id=&#34;git-版本控制&#34;&gt;Git 版本控制&lt;/h4&gt;
&lt;h4 id=&#34;linux-服务器&#34;&gt;Linux 服务器&lt;/h4&gt;
&lt;h2 id=&#34;三前端工程化&#34;&gt;三、前端工程化&lt;/h2&gt;
&lt;h3 id=&#34;研发流程&#34;&gt;研发流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;技术选型&lt;/li&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;li&gt;开发&lt;/li&gt;
&lt;li&gt;本地测试&lt;/li&gt;
&lt;li&gt;代码提交&lt;/li&gt;
&lt;li&gt;编译、打包、构建&lt;/li&gt;
&lt;li&gt;部署&lt;/li&gt;
&lt;li&gt;集成测试&lt;/li&gt;
&lt;li&gt;发布上线&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;代码托管&#34;&gt;代码托管&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;Gitee&lt;/li&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nodejs&#34;&gt;Node.JS&lt;/h3&gt;
&lt;h4 id=&#34;包管理&#34;&gt;包管理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;yarn&lt;/li&gt;
&lt;li&gt;bower&lt;/li&gt;
&lt;li&gt;npx&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开发框架&#34;&gt;开发框架&lt;/h3&gt;
&lt;h4 id=&#34;javascript-框架&#34;&gt;JavaScript 框架&lt;/h4&gt;
&lt;h5 id=&#34;vue&#34;&gt;Vue&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Vue Router&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;react&#34;&gt;React&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;React DOM&lt;/li&gt;
&lt;li&gt;React Router&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;MobX&lt;/li&gt;
&lt;li&gt;React Hooks&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;angular&#34;&gt;Angular&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;RxJS&lt;/li&gt;
&lt;li&gt;NgRx&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;svelte&#34;&gt;Svelte&lt;/h5&gt;
&lt;h4 id=&#34;css-框架&#34;&gt;CSS 框架&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;BootStrap&lt;/li&gt;
&lt;li&gt;Tailwind CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装库&#34;&gt;封装库&lt;/h3&gt;
&lt;h4 id=&#34;组件库&#34;&gt;组件库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LayUI&lt;/li&gt;
&lt;li&gt;ElementUI&lt;/li&gt;
&lt;li&gt;VantUI&lt;/li&gt;
&lt;li&gt;Ant Design&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数据可视化&#34;&gt;数据可视化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;EChart&lt;/li&gt;
&lt;li&gt;HighChart&lt;/li&gt;
&lt;li&gt;D3.js&lt;/li&gt;
&lt;li&gt;AntV&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工具库&#34;&gt;工具库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;moment&lt;/li&gt;
&lt;li&gt;lodash&lt;/li&gt;
&lt;li&gt;axios&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字体图标库&#34;&gt;字体图标库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IconFont&lt;/li&gt;
&lt;li&gt;IconPark&lt;/li&gt;
&lt;li&gt;Font Awesome&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;脚手架&#34;&gt;脚手架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vue-cli&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create-react-app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yeoman&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;前端架构&#34;&gt;前端架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前端模块化&lt;/li&gt;
&lt;li&gt;SPA&lt;/li&gt;
&lt;li&gt;多页应用&lt;/li&gt;
&lt;li&gt;前端路由&lt;/li&gt;
&lt;li&gt;PWA&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;服务端渲染&#34;&gt;服务端渲染&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Next.js（React）&lt;/li&gt;
&lt;li&gt;Nuxt.js（Vue）&lt;/li&gt;
&lt;li&gt;Universal（Angular）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bff&#34;&gt;BFF&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;前端微服务&#34;&gt;前端微服务&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;qiankun&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;css-in-js&#34;&gt;CSS in JS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内联样式&lt;/li&gt;
&lt;li&gt;声明样式&lt;/li&gt;
&lt;li&gt;引入样式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;css-模块化&#34;&gt;CSS 模块化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CSS Modules&lt;/li&gt;
&lt;li&gt;styled-components&lt;/li&gt;
&lt;li&gt;Styled JSX&lt;/li&gt;
&lt;li&gt;Emotion&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开发调试&#34;&gt;开发调试&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;webpack-dev-server&lt;/li&gt;
&lt;li&gt;serve&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内网穿透&#34;&gt;内网穿透&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ngrok&lt;/li&gt;
&lt;li&gt;NATAPP&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;css-预编译&#34;&gt;CSS 预编译&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SASS&lt;/li&gt;
&lt;li&gt;PostCSS&lt;/li&gt;
&lt;li&gt;Stylus&lt;/li&gt;
&lt;li&gt;LESS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;h4 id=&#34;测试分类&#34;&gt;测试分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;集成测试&lt;/li&gt;
&lt;li&gt;E2E 测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mock&#34;&gt;Mock&lt;/h4&gt;
&lt;h4 id=&#34;测试框架&#34;&gt;测试框架&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enzyme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Puppeteer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mocha&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chai&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jasmine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Headless Browser&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码质量&#34;&gt;代码质量&lt;/h3&gt;
&lt;h4 id=&#34;开发规范&#34;&gt;开发规范&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Style Guide&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类型校验&#34;&gt;类型校验&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码检查&#34;&gt;代码检查&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;StyleLint&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码风格&#34;&gt;代码风格&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提交规范&#34;&gt;提交规范&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;pre-commit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提交检查&#34;&gt;提交检查&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;hosky&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建工具&#34;&gt;构建工具&lt;/h3&gt;
&lt;h4 id=&#34;自动化构建&#34;&gt;自动化构建&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Gulp&lt;/li&gt;
&lt;li&gt;npm script&lt;/li&gt;
&lt;li&gt;grant&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;打包工具&#34;&gt;打包工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Webpack&lt;/li&gt;
&lt;li&gt;Rollup&lt;/li&gt;
&lt;li&gt;Vite&lt;/li&gt;
&lt;li&gt;Parcel&lt;/li&gt;
&lt;li&gt;Snowpack&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ci--cd&#34;&gt;CI / CD&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GitLab CI&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署&#34;&gt;部署&lt;/h3&gt;
&lt;h4 id=&#34;web-服务器&#34;&gt;Web 服务器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;容器&#34;&gt;容器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;K8s&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;部署策略&#34;&gt;部署策略&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;全量发布&lt;/li&gt;
&lt;li&gt;蓝绿部署&lt;/li&gt;
&lt;li&gt;滚动发布&lt;/li&gt;
&lt;li&gt;灰度发布&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;监控告警&#34;&gt;监控告警&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前端埋点&lt;/li&gt;
&lt;li&gt;错误监控&lt;/li&gt;
&lt;li&gt;性能监控&lt;/li&gt;
&lt;li&gt;行为监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四前端优化&#34;&gt;四、前端优化&lt;/h2&gt;
&lt;h3 id=&#34;性能优化&#34;&gt;性能优化&lt;/h3&gt;
&lt;h4 id=&#34;性能指标&#34;&gt;性能指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;FP&lt;/li&gt;
&lt;li&gt;FCP&lt;/li&gt;
&lt;li&gt;FMP&lt;/li&gt;
&lt;li&gt;TTI&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优化手段&#34;&gt;优化手段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;性能监控&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;样式优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript 优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码分割&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源压缩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打包优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service Worker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动画性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dns-prefetch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lazy loading&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化启动性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;渲染优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动端性能优化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户体验&#34;&gt;用户体验&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;骨架屏&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;兼容性&#34;&gt;兼容性&lt;/h3&gt;
&lt;h4 id=&#34;浏览器兼容性&#34;&gt;浏览器兼容性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;normalize.css&lt;/li&gt;
&lt;li&gt;html5shiv.js&lt;/li&gt;
&lt;li&gt;respond.js&lt;/li&gt;
&lt;li&gt;Babel&lt;/li&gt;
&lt;li&gt;Polyfill&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;屏幕分辨率兼容性&#34;&gt;屏幕分辨率兼容性&lt;/h4&gt;
&lt;h4 id=&#34;跨平台兼容性&#34;&gt;跨平台兼容性&lt;/h4&gt;
&lt;h3 id=&#34;seo&#34;&gt;SEO&lt;/h3&gt;
&lt;h3 id=&#34;安全&#34;&gt;安全&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;XSS&lt;/li&gt;
&lt;li&gt;CSRF&lt;/li&gt;
&lt;li&gt;反爬虫&lt;/li&gt;
&lt;li&gt;SQL 注入&lt;/li&gt;
&lt;li&gt;DDoS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;五前端生态&#34;&gt;五、前端生态&lt;/h2&gt;
&lt;h3 id=&#34;静态站点构建&#34;&gt;静态站点构建&lt;/h3&gt;
&lt;h4 id=&#34;开发&#34;&gt;开发&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;react-static&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;博客&#34;&gt;博客&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Gatsby.js&lt;/li&gt;
&lt;li&gt;Docusaurus&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;li&gt;Hexo&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文档&#34;&gt;文档&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JekyII&lt;/li&gt;
&lt;li&gt;Docsify&lt;/li&gt;
&lt;li&gt;VuePress&lt;/li&gt;
&lt;li&gt;Dumi&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;大前端&#34;&gt;大前端&lt;/h3&gt;
&lt;h4 id=&#34;移动应用&#34;&gt;移动应用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hybrid&lt;/li&gt;
&lt;li&gt;WebView&lt;/li&gt;
&lt;li&gt;React Native&lt;/li&gt;
&lt;li&gt;Flutter&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移动应用打包&#34;&gt;移动应用打包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Week&lt;/li&gt;
&lt;li&gt;Cordova&lt;/li&gt;
&lt;li&gt;Phonegap&lt;/li&gt;
&lt;li&gt;Ionic&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;桌面应用&#34;&gt;桌面应用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Electron&lt;/li&gt;
&lt;li&gt;NW.js&lt;/li&gt;
&lt;li&gt;Proton Native&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;小程序&#34;&gt;小程序&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;原生&lt;/li&gt;
&lt;li&gt;WebView&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;跨端开发框架&#34;&gt;跨端开发框架&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;uni-app&lt;/li&gt;
&lt;li&gt;Taro&lt;/li&gt;
&lt;li&gt;Flutter&lt;/li&gt;
&lt;li&gt;Chameleon&lt;/li&gt;
&lt;li&gt;Wepy&lt;/li&gt;
&lt;li&gt;Rax&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移动端调试&#34;&gt;移动端调试&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Chrome Dev Tools&lt;/li&gt;
&lt;li&gt;Android Simulator&lt;/li&gt;
&lt;li&gt;IOS Simulator&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;serverless&#34;&gt;Serverless&lt;/h3&gt;
&lt;h3 id=&#34;云开发&#34;&gt;云开发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;腾讯云云开发&lt;/li&gt;
&lt;li&gt;阿里云云开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;低代码&#34;&gt;低代码&lt;/h3&gt;
&lt;p&gt;零代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;腾讯云低码&lt;/li&gt;
&lt;li&gt;阿里宜搭&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;六前端求职&#34;&gt;六、前端求职&lt;/h2&gt;
&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;
&lt;h3 id=&#34;简历&#34;&gt;简历&lt;/h3&gt;
&lt;h3 id=&#34;面试题库&#34;&gt;面试题库&lt;/h3&gt;
&lt;h3 id=&#34;面经&#34;&gt;面经&lt;/h3&gt;
&lt;h3 id=&#34;面试实战&#34;&gt;面试实战&lt;/h3&gt;
&lt;p&gt;（模拟面试）&lt;/p&gt;
&lt;h2 id=&#34;七前端未来&#34;&gt;七、前端未来&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WebAssembly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;智能 UI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;React Server Component&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSS Houdini&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;webcomponents&#34;&gt;WebComponents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTML templates（HTML模板）&lt;/li&gt;
&lt;li&gt;Custom elements（自定义元素）&lt;/li&gt;
&lt;li&gt;Shadow DOM（影子DOM）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;尾声---持续学习&#34;&gt;尾声 - 持续学习&lt;/h2&gt;
&lt;h3 id=&#34;优秀前端人的特质&#34;&gt;优秀前端人的特质&lt;/h3&gt;
&lt;h3 id=&#34;学习资源&#34;&gt;学习资源&lt;/h3&gt;
&lt;h3 id=&#34;前端资讯&#34;&gt;前端资讯&lt;/h3&gt;
&lt;h3 id=&#34;技术博客&#34;&gt;技术博客&lt;/h3&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;h2 id=&#34;我的前端学习路线&#34;&gt;我的前端学习路线&lt;/h2&gt;
&lt;p&gt;找项目：searchCode&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;todo&lt;/h2&gt;
&lt;p&gt;优化 html、css、js 内容&lt;/p&gt;
&lt;p&gt;补充尾声内容&lt;/p&gt;
&lt;p&gt;描述和链接&lt;/p&gt;
&lt;p&gt;写一条线&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Day02</title>
        <link>https://damaicao.github.io/post/day02/</link>
        <pubDate>Wed, 01 Dec 2021 01:21:44 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/day02/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/202112010835587.webp" alt="Featured image of post Day02" /&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/202112010835587.webp&#34; &gt;
		&lt;img src=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/202112010835587.webp&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;图片&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;图片&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;排序算法&#34;&gt;排序算法&lt;/h1&gt;
&lt;p&gt;排序也称排序算法 &lt;strong&gt;(Sort Algorithm)&lt;/strong&gt;
是将一组数据，依指定的顺序进行排列的过程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;排序的分类&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内部排序:指将需要处理的所有数据都加载到 &lt;code&gt;内部存储器&lt;/code&gt; 中进行排序。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;外部排序法:数据量过大，无法全部加载到内存中，需要借助 &lt;code&gt;外部存储&lt;/code&gt; 进行排序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/image-20211128000834503.png&#34; &gt;
		&lt;img src=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/image-20211128000834503.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20211128000834503&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20211128000834503&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;算法时间复杂度&#34;&gt;算法时间复杂度&lt;/h1&gt;
&lt;p&gt;度量一个程序(算法)执行时间的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;事后统计法&lt;/p&gt;
&lt;p&gt;这种方法可行,但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要
实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件等环境因素,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事前估算法&lt;/p&gt;
&lt;p&gt;通过分析某个算法的时间复杂度来判断哪个算法更优.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;时间频度&#34;&gt;时间频度&lt;/h2&gt;
&lt;p&gt;时间频度：一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多,它花费时间就多。&lt;code&gt;一个算法中的语句执行次数称为语句频度或时间频度.&lt;/code&gt; 记为T(n)。[举例说明]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略常数项, 低次项,系数&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;时间复杂度httpsleetcode-cncomleetbookreadillustration-of-algorithmr81qpe&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/r81qpe/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;时间复杂度&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)= O（f(n))，称O（f(n)）为算法的渐进时间复杂度，简称 &lt;code&gt;时间复杂度&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;T(n)不同，但时间复杂度可能相同。如：T(n)=n2+7n+6与T(n)=3n2+2n+2它们的T(n)不同，但时间复杂度相同，都为O(n2)。&lt;/li&gt;
&lt;li&gt;计算时间复杂度的方法：&lt;/li&gt;
&lt;li&gt;用常数1代替运行时间中的所有加法常数 T(n)=n2+7n+6 =&amp;gt; T(n)=n2+7n+1&lt;/li&gt;
&lt;li&gt;修改后的运行次数函数中，只保留最高阶项&lt;/li&gt;
&lt;li&gt;去除最高阶项的系数&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常见的时间复杂度&#34;&gt;常见的时间复杂度&lt;/h2&gt;
&lt;p&gt;根据从小到大排列，常见的算法时间复杂度主要有：&lt;/p&gt;
&lt;p&gt;O(1) &amp;lt; O(log N) &amp;lt; O(N) &amp;lt; O(Nlog N) &amp;lt; O(N^2) &amp;lt; O(2^N) &amp;lt; O(N!)&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/1623519242-UTNefQ-Picture1.png&#34; &gt;
		&lt;img src=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/1623519242-UTNefQ-Picture1.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;力扣（LeetCode）&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;力扣（LeetCode）&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平均时间复杂度和最坏时间复杂度&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;平均时间复杂度&lt;/code&gt; 是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最坏情况下的时间复杂度称 &lt;code&gt;最坏时间复杂度&lt;/code&gt; 。般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如图:)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/image-20211128004810530.png&#34; &gt;
		&lt;img src=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/image-20211128004810530.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20211128004810530&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20211128004810530&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;算法的空间复杂度&#34;&gt;算法的空间复杂度&lt;/h1&gt;
&lt;h2 id=&#34;基本介绍&#34;&gt;基本介绍&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;类似于时间复杂度的讨论，一个算法的 &lt;code&gt;空间复杂度(Space Complexity) &lt;/code&gt;定义为该算法所耗费的存储空间，它也是问题规模n的函数。&lt;/li&gt;
&lt;li&gt;空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况&lt;/li&gt;
&lt;li&gt;在做算法分析时，主要讨论的是 &lt;code&gt;时间复杂度&lt;/code&gt; 。&lt;strong&gt;从用户使用体验上看，更看重的程序执行的速度&lt;/strong&gt;。有些 &lt;code&gt;缓存产品(redis,memcache)&lt;/code&gt; 和 &lt;code&gt;算法(基数排序)&lt;/code&gt; 本质就是用空间换时间.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h1&gt;
&lt;h2 id=&#34;基本介绍-1&#34;&gt;基本介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。&lt;/p&gt;
&lt;p&gt;因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置个标志flag判断元素是否进行过交换。从而减少不必要的比较。&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bubbleSort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]){&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;// temp = arr[i];
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// arr[i] = arr[i + 1];
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// arr[i + 1] = temp;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// 如果一次都没有交换
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;flag&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;选择排序&#34;&gt;选择排序&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;选择排序&lt;/code&gt; （select sorting）也是一种简单的排序方法。它的基本思想是：第一次从arr[0]~arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]~arr[n-1]中选取最小值，与arr[1]交换，第三次从arr[2]~arr[n-1]中选取最小值，与arr[2]交换，…，第i次从arr[i-1]~arr[n-1]中选取最小值，与arr[i-1]交换，第n-1次从arr[n-2]~arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectSort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; minIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                    minIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;minIndex &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
                arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;minIndex&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;插入排序&#34;&gt;插入排序&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;思想&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;插入排序（Insertion Sorting）的基本思想是：肥n个待排序的元素看成为一个有序表和一个无序表，&lt;code&gt;开始时有序表中只包含一个元素，无序表中包含有n-1个元素&lt;/code&gt;，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。&lt;/p&gt;
&lt;p&gt;就是拿后面的值与前面的值比较大小&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insertSort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//定义待插入数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; insertVal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; insertIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

            &lt;span style=&#34;color:#75715e&#34;&gt;//1 insertIndex &amp;gt;= 0保证在给insertVal 找插入位置，不越界
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//2.insertVal &amp;lt; arr[insertIndex] 待插入的数，还没有找到插入位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//3. 就需要将arr[insertIndex]后移
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;insertIndex &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; insertVal &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;insertIndex&lt;span style=&#34;color:#f92672&#34;&gt;]){&lt;/span&gt;
                arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;insertIndex &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;insertIndex&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                insertIndex&lt;span style=&#34;color:#f92672&#34;&gt;--;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;insertIndex &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
                arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;insertIndex &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; insertVal&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;第&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;轮排序&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h2&gt;
&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种&lt;strong&gt;插入排序&lt;/strong&gt;，它是简单插入排序经过改进之后的一个&lt;strong&gt;更高效的版本&lt;/strong&gt;，也称为 &lt;code&gt;缩小增量排序&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;思想&#34;&gt;思想&lt;/h3&gt;
&lt;p&gt;希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shellSort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; gap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; gap &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; gap &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//分组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;// 组内插入排序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;//当前元素大于步长元素,则交换
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;希尔排序&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+(++&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;)+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;轮&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shellSort2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; gap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; gap &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; gap &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//分组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;]){&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; gap &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                        arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                        j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; gap&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                    arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;希尔排序&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+(++&lt;/span&gt;count&lt;span style=&#34;color:#f92672&#34;&gt;)+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;轮&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;快速排序&#34;&gt;快速排序&lt;/h2&gt;
&lt;h3 id=&#34;介绍-1&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;快速排序&lt;/strong&gt;（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，，以此达到整个数据变成有序序列&lt;/p&gt;
</description>
        </item>
        <item>
        <title>写博客的第一天</title>
        <link>https://damaicao.github.io/post/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</link>
        <pubDate>Fri, 26 Nov 2021 00:22:24 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/%E6%96%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</guid>
        <description>&lt;img src="https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/20211118181809.jpg" alt="Featured image of post 写博客的第一天" /&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/20211118181809.jpg&#34; &gt;
		&lt;img src=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/20211118181809.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;20211118181809&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;20211118181809&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;你好&#34;&gt;你好&lt;/h1&gt;
&lt;p&gt;你好啊,昼眠和漓消消&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Day01</title>
        <link>https://damaicao.github.io/post/day01/</link>
        <pubDate>Fri, 26 Nov 2021 00:15:58 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/day01/</guid>
        <description>&lt;img src="https://damaicao.github.io/image/%E5%85%83%E6%97%A6%E8%B4%BA%E5%9B%BE.png" alt="Featured image of post Day01" /&gt;&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/%E6%8B%89%E8%8F%B2-%E4%BD%A0%E4%B8%8D%E5%86%B7%E5%90%97%20%E2%80%93%20%E9%94%A6%E9%87%8C%E3%81%AE%E7%94%BB%E4%BD%9C%E5%AE%A4.jpg&#34; &gt;
		&lt;img src=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/%E6%8B%89%E8%8F%B2-%E4%BD%A0%E4%B8%8D%E5%86%B7%E5%90%97%20%E2%80%93%20%E9%94%A6%E9%87%8C%E3%81%AE%E7%94%BB%E4%BD%9C%E5%AE%A4.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;拉菲-你不冷吗 – 锦里の画作室&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;拉菲-你不冷吗 – 锦里の画作室&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;线性结构&#34;&gt;线性结构&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;数组,队列,链表, 栈&lt;/p&gt;
&lt;h2 id=&#34;稀疏数组&#34;&gt;稀疏数组&lt;/h2&gt;
&lt;p&gt;**定义:**当一个数组中大部分元素为0,或者为同一个值的数组时,可以使用稀疏数组来保存该数组。&lt;/p&gt;
&lt;p&gt;稀疏数组的处理方法是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记录数组一共有几行几列,有多少个不同的值&lt;/li&gt;
&lt;li&gt;把具有不同值的元素的行列及值记录在一个小规模的数组中,从而缩小程序的规模&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;二维数组转稀硫数组的思路:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历原始的二维数组,得到有效数据的个数sum&lt;/li&gt;
&lt;li&gt;根据sum就可以创建稀硫数组 &lt;code&gt;sparseArr int[sum+1][3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将二维数组的有效数据数据存入到稀硫数组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;稀硫数组转原始的二维数组的思路:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先读取稀硫数组的第一行,根据第一行的数据,创建原始的二维数组,比如上面的 &lt;code&gt;chessArr2=int[11[11]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在读取稀硫数组后几行的数据,并赋给原始的二维数组即可&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;链表&#34;&gt;链表&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链表是以节点的方式来存储,是 &lt;code&gt;链式存储 &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每个节点包含data域,next域:指向下一个节点&lt;/li&gt;
&lt;li&gt;如图:发现链表的各个节点 &lt;code&gt;不一定是连续存储&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;链表分 &lt;code&gt;带头节点的链表&lt;/code&gt; 和 &lt;code&gt;没有头节点的链表&lt;/code&gt; ,根据实际的需求来确定&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;双向链表&#34;&gt;双向链表&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;栈&#34;&gt;栈&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;栈的英文为( stack)&lt;/li&gt;
&lt;li&gt;栈是一个先入后出( FILO-First In last out)的有序列表。&lt;/li&gt;
&lt;li&gt;栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的种特殊线性表。允许插入和删除的一端,为变化的一端,称为栈顶(Top),另端为固定的一端,称为栈底( Bottom)&lt;/li&gt;
&lt;li&gt;根据栈的定义可知,最先放入栈中元素在栈底,最后放入的元素在栈项,而删除元素刚好相反,最后放入的元素最先删除,最先放入的元素最后删除&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;应用场景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;子程序的调用:在跳往子程序前,会先将下个指令的地址存到堆栈中,直到子程序执行完后再将地址取出,以回到原来的程序中。&lt;/li&gt;
&lt;li&gt;处理递归调用:和子程序的调用类似,只是除了储存下一个指令的地址外,也将参数、区域变量等数据存入堆栈中。&lt;/li&gt;
&lt;li&gt;表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。&lt;/li&gt;
&lt;li&gt;二叉树的遍历&lt;/li&gt;
&lt;li&gt;图形的深度优先 (depth-first)搜索法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;前中后缀表达式&#34;&gt;前,中,后缀表达式&lt;/h3&gt;
&lt;p&gt;逆波兰表达式&lt;/p&gt;
&lt;h2 id=&#34;递归&#34;&gt;递归&lt;/h2&gt;
&lt;p&gt;简单的说：递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂的问题,同时
可以让代码变得简洁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;递归需要遵守的重要规则&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行一个方法时，就创建一个新的受保护的独立空间(栈空间)&lt;/li&gt;
&lt;li&gt;方法的局部变量是独立的，不会相互影响&lt;/li&gt;
&lt;li&gt;递归必须向退出递归的条件逼近，否则就是无限递归，死龟了:)&lt;/li&gt;
&lt;li&gt;当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;八皇后&lt;/p&gt;
</description>
        </item>
        <item>
        <title>算法问题</title>
        <link>https://damaicao.github.io/post/%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</link>
        <pubDate>Fri, 26 Nov 2021 00:15:58 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;img src="https://damaicao.github.io/image/%E5%85%83%E6%97%A6%E8%B4%BA%E5%9B%BE.png" alt="Featured image of post 算法问题" /&gt;&lt;h2 id=&#34;经典算法&#34;&gt;经典算法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;汉诺塔问题 =&amp;gt;  &lt;strong&gt;分治算法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;八皇后问题 =&amp;gt;  &lt;strong&gt;回溯/分治算法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;马踏棋盘问题 =&amp;gt; &lt;strong&gt;图的深度优化遍历算法(DFS)+贪心算法优化&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;主题内容&#34;&gt;主题内容&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;稀疏数组和队列
&lt;ol&gt;
&lt;li&gt;稀疏数组&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;链表
&lt;ol&gt;
&lt;li&gt;单链表&lt;/li&gt;
&lt;li&gt;双向链表&lt;/li&gt;
&lt;li&gt;单向环形链表&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;递归
&lt;ol&gt;
&lt;li&gt;迷宫问题&lt;/li&gt;
&lt;li&gt;八皇后&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;排序算法
&lt;ol&gt;
&lt;li&gt;内部 &lt;strong&gt;使用内存&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;插入
&lt;ol&gt;
&lt;li&gt;直接&lt;/li&gt;
&lt;li&gt;间接&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;选择
&lt;ol&gt;
&lt;li&gt;简单选择&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;交换
&lt;ol&gt;
&lt;li&gt;冒泡&lt;/li&gt;
&lt;li&gt;快速&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;归并&lt;/li&gt;
&lt;li&gt;基数(桶排序)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;外部排序 &lt;strong&gt;使用内存和外存&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查找算法
&lt;ol&gt;
&lt;li&gt;线性查找&lt;/li&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;li&gt;插值查找&lt;/li&gt;
&lt;li&gt;斐波那契(黄金分割法)查找&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;哈希表&lt;/li&gt;
&lt;li&gt;树
&lt;ol&gt;
&lt;li&gt;二叉树
&lt;ol&gt;
&lt;li&gt;顺序存储二叉树&lt;/li&gt;
&lt;li&gt;线索化二叉树&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;li&gt;赫夫曼树&lt;/li&gt;
&lt;li&gt;赫夫曼编码&lt;/li&gt;
&lt;li&gt;二叉排序树&lt;/li&gt;
&lt;li&gt;平衡二叉树(AVL树)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;多路查找树
&lt;ol&gt;
&lt;li&gt;二叉树与B树&lt;/li&gt;
&lt;li&gt;2-3树&lt;/li&gt;
&lt;li&gt;B树,B+树,B*树&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;图
&lt;ol&gt;
&lt;li&gt;深度优先搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;十大算法
&lt;ol&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;li&gt;分治算法&lt;/li&gt;
&lt;li&gt;动态规划算法&lt;/li&gt;
&lt;li&gt;KMP算法&lt;/li&gt;
&lt;li&gt;贪心算法&lt;/li&gt;
&lt;li&gt;普利姆算法&lt;/li&gt;
&lt;li&gt;克鲁斯卡尔算法&lt;/li&gt;
&lt;li&gt;迪杰斯特拉算法&lt;/li&gt;
&lt;li&gt;弗洛伊德算法&lt;/li&gt;
&lt;li&gt;马踏棋盘算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
