<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Damaicao的博客</title>
        <link>https://damaicao.github.io/</link>
        <description>Recent content on Damaicao的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 26 Nov 2021 00:22:24 +0800</lastBuildDate><atom:link href="https://damaicao.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>随随便便</title>
        <link>https://damaicao.github.io/post/%E9%9A%8F%E9%9A%8F%E4%BE%BF%E4%BE%BF/</link>
        <pubDate>Fri, 26 Nov 2021 00:22:24 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/%E9%9A%8F%E9%9A%8F%E4%BE%BF%E4%BE%BF/</guid>
        <description>&lt;h1 id=&#34;你好&#34;&gt;你好&lt;/h1&gt;
&lt;p&gt;你好啊,昼眠和漓消消&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Day001</title>
        <link>https://damaicao.github.io/post/day001/</link>
        <pubDate>Fri, 26 Nov 2021 00:15:58 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/day001/</guid>
        <description>&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/%E6%8B%89%E8%8F%B2-%E4%BD%A0%E4%B8%8D%E5%86%B7%E5%90%97%20%E2%80%93%20%E9%94%A6%E9%87%8C%E3%81%AE%E7%94%BB%E4%BD%9C%E5%AE%A4.jpg&#34; &gt;
		&lt;img src=&#34;https://cdn.jsdelivr.net/gh/damaicao/damaicao-img/blog-imgs/%E6%8B%89%E8%8F%B2-%E4%BD%A0%E4%B8%8D%E5%86%B7%E5%90%97%20%E2%80%93%20%E9%94%A6%E9%87%8C%E3%81%AE%E7%94%BB%E4%BD%9C%E5%AE%A4.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;拉菲-你不冷吗 – 锦里の画作室&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;拉菲-你不冷吗 – 锦里の画作室&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;线性结构&#34;&gt;线性结构&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;数组,队列,链表, 栈&lt;/p&gt;
&lt;h2 id=&#34;稀疏数组&#34;&gt;稀疏数组&lt;/h2&gt;
&lt;p&gt;**定义:**当一个数组中大部分元素为0,或者为同一个值的数组时,可以使用稀疏数组来保存该数组。&lt;/p&gt;
&lt;p&gt;稀疏数组的处理方法是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记录数组一共有几行几列,有多少个不同的值&lt;/li&gt;
&lt;li&gt;把具有不同值的元素的行列及值记录在一个小规模的数组中,从而缩小程序的规模&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;二维数组转稀硫数组的思路:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历原始的二维数组,得到有效数据的个数sum&lt;/li&gt;
&lt;li&gt;根据sum就可以创建稀硫数组 &lt;code&gt;sparseArr int[sum+1][3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将二维数组的有效数据数据存入到稀硫数组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;稀硫数组转原始的二维数组的思路:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先读取稀硫数组的第一行,根据第一行的数据,创建原始的二维数组,比如上面的 &lt;code&gt;chessArr2=int[11[11]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在读取稀硫数组后几行的数据,并赋给原始的二维数组即可&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;链表&#34;&gt;链表&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链表是以节点的方式来存储,是 &lt;code&gt;链式存储 &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每个节点包含data域,next域:指向下一个节点&lt;/li&gt;
&lt;li&gt;如图:发现链表的各个节点 &lt;code&gt;不一定是连续存储&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;链表分 &lt;code&gt;带头节点的链表&lt;/code&gt; 和 &lt;code&gt;没有头节点的链表&lt;/code&gt; ,根据实际的需求来确定&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;双向链表&#34;&gt;双向链表&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;栈&#34;&gt;栈&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;栈的英文为( stack)&lt;/li&gt;
&lt;li&gt;栈是一个先入后出( FILO-First In last out)的有序列表。&lt;/li&gt;
&lt;li&gt;栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的种特殊线性表。允许插入和删除的一端,为变化的一端,称为栈顶(Top),另端为固定的一端,称为栈底( Bottom)&lt;/li&gt;
&lt;li&gt;根据栈的定义可知,最先放入栈中元素在栈底,最后放入的元素在栈项,而删除元素刚好相反,最后放入的元素最先删除,最先放入的元素最后删除&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;应用场景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;子程序的调用:在跳往子程序前,会先将下个指令的地址存到堆栈中,直到子程序执行完后再将地址取出,以回到原来的程序中。&lt;/li&gt;
&lt;li&gt;处理递归调用:和子程序的调用类似,只是除了储存下一个指令的地址外,也将参数、区域变量等数据存入堆栈中。&lt;/li&gt;
&lt;li&gt;表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。&lt;/li&gt;
&lt;li&gt;二叉树的遍历&lt;/li&gt;
&lt;li&gt;图形的深度优先 (depth-first)搜索法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;前中后缀表达式&#34;&gt;前,中,后缀表达式&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>算法问题</title>
        <link>https://damaicao.github.io/post/%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</link>
        <pubDate>Fri, 26 Nov 2021 00:15:58 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;h2 id=&#34;经典算法&#34;&gt;经典算法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;汉诺塔问题 =&amp;gt;  &lt;strong&gt;分治算法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;八皇后问题 =&amp;gt;  &lt;strong&gt;回溯/分治算法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;马踏棋盘问题 =&amp;gt; &lt;strong&gt;图的深度优化遍历算法(DFS)+贪心算法优化&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;主题内容&#34;&gt;主题内容&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;稀疏数组和队列
&lt;ol&gt;
&lt;li&gt;稀疏数组&lt;/li&gt;
&lt;li&gt;队列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;链表
&lt;ol&gt;
&lt;li&gt;单链表&lt;/li&gt;
&lt;li&gt;双向链表&lt;/li&gt;
&lt;li&gt;单向环形链表&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;栈&lt;/li&gt;
&lt;li&gt;递归
&lt;ol&gt;
&lt;li&gt;迷宫问题&lt;/li&gt;
&lt;li&gt;八皇后&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;排序算法
&lt;ol&gt;
&lt;li&gt;内部 &lt;strong&gt;使用内存&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;插入
&lt;ol&gt;
&lt;li&gt;直接&lt;/li&gt;
&lt;li&gt;间接&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;选择
&lt;ol&gt;
&lt;li&gt;简单选择&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;交换
&lt;ol&gt;
&lt;li&gt;冒泡&lt;/li&gt;
&lt;li&gt;快速&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;归并&lt;/li&gt;
&lt;li&gt;基数(桶排序)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;外部排序 &lt;strong&gt;使用内存和外存&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查找算法
&lt;ol&gt;
&lt;li&gt;线性查找&lt;/li&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;li&gt;插值查找&lt;/li&gt;
&lt;li&gt;斐波那契(黄金分割法)查找&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;哈希表&lt;/li&gt;
&lt;li&gt;树
&lt;ol&gt;
&lt;li&gt;二叉树
&lt;ol&gt;
&lt;li&gt;顺序存储二叉树&lt;/li&gt;
&lt;li&gt;线索化二叉树&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;li&gt;赫夫曼树&lt;/li&gt;
&lt;li&gt;赫夫曼编码&lt;/li&gt;
&lt;li&gt;二叉排序树&lt;/li&gt;
&lt;li&gt;平衡二叉树(AVL树)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;多路查找树
&lt;ol&gt;
&lt;li&gt;二叉树与B树&lt;/li&gt;
&lt;li&gt;2-3树&lt;/li&gt;
&lt;li&gt;B树,B+树,B*树&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;图
&lt;ol&gt;
&lt;li&gt;深度优先搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;十大算法
&lt;ol&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;li&gt;分治算法&lt;/li&gt;
&lt;li&gt;动态规划算法&lt;/li&gt;
&lt;li&gt;KMP算法&lt;/li&gt;
&lt;li&gt;贪心算法&lt;/li&gt;
&lt;li&gt;普利姆算法&lt;/li&gt;
&lt;li&gt;克鲁斯卡尔算法&lt;/li&gt;
&lt;li&gt;迪杰斯特拉算法&lt;/li&gt;
&lt;li&gt;弗洛伊德算法&lt;/li&gt;
&lt;li&gt;马踏棋盘算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>First</title>
        <link>https://damaicao.github.io/post/first/</link>
        <pubDate>Tue, 23 Nov 2021 23:06:34 +0800</pubDate>
        
        <guid>https://damaicao.github.io/post/first/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
